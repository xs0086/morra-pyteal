{"ast":null,"code":"/**\n * NOTICE: This file was generated. Editing this file manually is not recommended.\n */\n/* eslint-disable no-use-before-define */\nimport { Buffer } from 'buffer';\nimport BaseModel from '../../basemodel';\n/**\n * Account information at a given round.\n * Definition:\n * data/basics/userBalance.go : AccountData\n */\nexport class Account extends BaseModel {\n  /**\n   * Creates a new `Account` object.\n   * @param address - the account public key\n   * @param amount - (algo) total number of MicroAlgos in the account\n   * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\n   * @param minBalance - MicroAlgo balance required by the account.\n   * The requirement grows based on asset and application usage.\n   * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\n   * @param rewards - (ern) total rewards of MicroAlgos the account has received, including pending\n   * rewards.\n   * @param round - The round for which this information is relevant.\n   * @param status - (onl) delegation status of the account's MicroAlgos\n   * * Offline - indicates that the associated account is delegated.\n   * * Online - indicates that the associated account used as part of the delegation\n   * pool.\n   * * NotParticipating - indicates that the associated account is neither a\n   * delegator nor a delegate.\n   * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\n   * of application local data (AppLocalState objects) stored in this account.\n   * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\n   * AssetHolding objects held by this account.\n   * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\n   * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\n   * @param appsLocalState - (appl) applications local data stored in this account.\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\n   * @param appsTotalExtraPages - (teap) the sum of all extra application program pages for this account.\n   * @param appsTotalSchema - (tsch) stores the sum of all of the local schemas and global schemas in this\n   * account.\n   * Note: the raw account uses `StateSchema` for this type.\n   * @param assets - (asset) assets held by this account.\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\n   * @param authAddr - (spend) the address against which signing should be checked. If empty, the\n   * address of the current account is used. This field can be updated in any\n   * transaction by setting the RekeyTo field.\n   * @param createdApps - (appp) parameters of applications created by this account including app global\n   * data.\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\n   * @param createdAssets - (apar) parameters of assets created by this account.\n   * Note: the raw account uses `map[int] -> Asset` for this type.\n   * @param participation - AccountParticipation describes the parameters used by this account in consensus\n   * protocol.\n   * @param rewardBase - (ebase) used as part of the rewards computation. Only applicable to accounts\n   * which are participating.\n   * @param sigType - Indicates what type of signature is used by this account, must be one of:\n   * * sig\n   * * msig\n   * * lsig\n   * @param totalBoxBytes - (tbxb) The total number of bytes used by this account's app's box keys and\n   * values.\n   * @param totalBoxes - (tbx) The number of existing boxes created by this account's app.\n   */\n  constructor(_ref) {\n    let {\n      address,\n      amount,\n      amountWithoutPendingRewards,\n      minBalance,\n      pendingRewards,\n      rewards,\n      round,\n      status,\n      totalAppsOptedIn,\n      totalAssetsOptedIn,\n      totalCreatedApps,\n      totalCreatedAssets,\n      appsLocalState,\n      appsTotalExtraPages,\n      appsTotalSchema,\n      assets,\n      authAddr,\n      createdApps,\n      createdAssets,\n      participation,\n      rewardBase,\n      sigType,\n      totalBoxBytes,\n      totalBoxes\n    } = _ref;\n    super();\n    this.address = address;\n    this.amount = amount;\n    this.amountWithoutPendingRewards = amountWithoutPendingRewards;\n    this.minBalance = minBalance;\n    this.pendingRewards = pendingRewards;\n    this.rewards = rewards;\n    this.round = round;\n    this.status = status;\n    this.totalAppsOptedIn = totalAppsOptedIn;\n    this.totalAssetsOptedIn = totalAssetsOptedIn;\n    this.totalCreatedApps = totalCreatedApps;\n    this.totalCreatedAssets = totalCreatedAssets;\n    this.appsLocalState = appsLocalState;\n    this.appsTotalExtraPages = appsTotalExtraPages;\n    this.appsTotalSchema = appsTotalSchema;\n    this.assets = assets;\n    this.authAddr = authAddr;\n    this.createdApps = createdApps;\n    this.createdAssets = createdAssets;\n    this.participation = participation;\n    this.rewardBase = rewardBase;\n    this.sigType = sigType;\n    this.totalBoxBytes = totalBoxBytes;\n    this.totalBoxes = totalBoxes;\n    this.attribute_map = {\n      address: 'address',\n      amount: 'amount',\n      amountWithoutPendingRewards: 'amount-without-pending-rewards',\n      minBalance: 'min-balance',\n      pendingRewards: 'pending-rewards',\n      rewards: 'rewards',\n      round: 'round',\n      status: 'status',\n      totalAppsOptedIn: 'total-apps-opted-in',\n      totalAssetsOptedIn: 'total-assets-opted-in',\n      totalCreatedApps: 'total-created-apps',\n      totalCreatedAssets: 'total-created-assets',\n      appsLocalState: 'apps-local-state',\n      appsTotalExtraPages: 'apps-total-extra-pages',\n      appsTotalSchema: 'apps-total-schema',\n      assets: 'assets',\n      authAddr: 'auth-addr',\n      createdApps: 'created-apps',\n      createdAssets: 'created-assets',\n      participation: 'participation',\n      rewardBase: 'reward-base',\n      sigType: 'sig-type',\n      totalBoxBytes: 'total-box-bytes',\n      totalBoxes: 'total-boxes'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined') throw new Error(`Response is missing required field 'address': ${data}`);\n    if (typeof data['amount'] === 'undefined') throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['amount-without-pending-rewards'] === 'undefined') throw new Error(`Response is missing required field 'amount-without-pending-rewards': ${data}`);\n    if (typeof data['min-balance'] === 'undefined') throw new Error(`Response is missing required field 'min-balance': ${data}`);\n    if (typeof data['pending-rewards'] === 'undefined') throw new Error(`Response is missing required field 'pending-rewards': ${data}`);\n    if (typeof data['rewards'] === 'undefined') throw new Error(`Response is missing required field 'rewards': ${data}`);\n    if (typeof data['round'] === 'undefined') throw new Error(`Response is missing required field 'round': ${data}`);\n    if (typeof data['status'] === 'undefined') throw new Error(`Response is missing required field 'status': ${data}`);\n    if (typeof data['total-apps-opted-in'] === 'undefined') throw new Error(`Response is missing required field 'total-apps-opted-in': ${data}`);\n    if (typeof data['total-assets-opted-in'] === 'undefined') throw new Error(`Response is missing required field 'total-assets-opted-in': ${data}`);\n    if (typeof data['total-created-apps'] === 'undefined') throw new Error(`Response is missing required field 'total-created-apps': ${data}`);\n    if (typeof data['total-created-assets'] === 'undefined') throw new Error(`Response is missing required field 'total-created-assets': ${data}`);\n    return new Account({\n      address: data['address'],\n      amount: data['amount'],\n      amountWithoutPendingRewards: data['amount-without-pending-rewards'],\n      minBalance: data['min-balance'],\n      pendingRewards: data['pending-rewards'],\n      rewards: data['rewards'],\n      round: data['round'],\n      status: data['status'],\n      totalAppsOptedIn: data['total-apps-opted-in'],\n      totalAssetsOptedIn: data['total-assets-opted-in'],\n      totalCreatedApps: data['total-created-apps'],\n      totalCreatedAssets: data['total-created-assets'],\n      appsLocalState: typeof data['apps-local-state'] !== 'undefined' ? data['apps-local-state'].map(ApplicationLocalState.from_obj_for_encoding) : undefined,\n      appsTotalExtraPages: data['apps-total-extra-pages'],\n      appsTotalSchema: typeof data['apps-total-schema'] !== 'undefined' ? ApplicationStateSchema.from_obj_for_encoding(data['apps-total-schema']) : undefined,\n      assets: typeof data['assets'] !== 'undefined' ? data['assets'].map(AssetHolding.from_obj_for_encoding) : undefined,\n      authAddr: data['auth-addr'],\n      createdApps: typeof data['created-apps'] !== 'undefined' ? data['created-apps'].map(Application.from_obj_for_encoding) : undefined,\n      createdAssets: typeof data['created-assets'] !== 'undefined' ? data['created-assets'].map(Asset.from_obj_for_encoding) : undefined,\n      participation: typeof data['participation'] !== 'undefined' ? AccountParticipation.from_obj_for_encoding(data['participation']) : undefined,\n      rewardBase: data['reward-base'],\n      sigType: data['sig-type'],\n      totalBoxBytes: data['total-box-bytes'],\n      totalBoxes: data['total-boxes']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * AccountApplicationResponse describes the account's application local state and\n * global state (AppLocalState and AppParams, if either exists) for a specific\n * application ID. Global state will only be returned if the provided address is\n * the application's creator.\n */\nexport class AccountApplicationResponse extends BaseModel {\n  /**\n   * Creates a new `AccountApplicationResponse` object.\n   * @param round - The round for which this information is relevant.\n   * @param appLocalState - (appl) the application local data stored in this account.\n   * The raw account uses `AppLocalState` for this type.\n   * @param createdApp - (appp) parameters of the application created by this account including app\n   * global data.\n   * The raw account uses `AppParams` for this type.\n   */\n  constructor(_ref2) {\n    let {\n      round,\n      appLocalState,\n      createdApp\n    } = _ref2;\n    super();\n    this.round = round;\n    this.appLocalState = appLocalState;\n    this.createdApp = createdApp;\n    this.attribute_map = {\n      round: 'round',\n      appLocalState: 'app-local-state',\n      createdApp: 'created-app'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['round'] === 'undefined') throw new Error(`Response is missing required field 'round': ${data}`);\n    return new AccountApplicationResponse({\n      round: data['round'],\n      appLocalState: typeof data['app-local-state'] !== 'undefined' ? ApplicationLocalState.from_obj_for_encoding(data['app-local-state']) : undefined,\n      createdApp: typeof data['created-app'] !== 'undefined' ? ApplicationParams.from_obj_for_encoding(data['created-app']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * AccountAssetResponse describes the account's asset holding and asset parameters\n * (if either exist) for a specific asset ID. Asset parameters will only be\n * returned if the provided address is the asset's creator.\n */\nexport class AccountAssetResponse extends BaseModel {\n  /**\n   * Creates a new `AccountAssetResponse` object.\n   * @param round - The round for which this information is relevant.\n   * @param assetHolding - (asset) Details about the asset held by this account.\n   * The raw account uses `AssetHolding` for this type.\n   * @param createdAsset - (apar) parameters of the asset created by this account.\n   * The raw account uses `AssetParams` for this type.\n   */\n  constructor(_ref3) {\n    let {\n      round,\n      assetHolding,\n      createdAsset\n    } = _ref3;\n    super();\n    this.round = round;\n    this.assetHolding = assetHolding;\n    this.createdAsset = createdAsset;\n    this.attribute_map = {\n      round: 'round',\n      assetHolding: 'asset-holding',\n      createdAsset: 'created-asset'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['round'] === 'undefined') throw new Error(`Response is missing required field 'round': ${data}`);\n    return new AccountAssetResponse({\n      round: data['round'],\n      assetHolding: typeof data['asset-holding'] !== 'undefined' ? AssetHolding.from_obj_for_encoding(data['asset-holding']) : undefined,\n      createdAsset: typeof data['created-asset'] !== 'undefined' ? AssetParams.from_obj_for_encoding(data['created-asset']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * AccountParticipation describes the parameters used by this account in consensus\n * protocol.\n */\nexport class AccountParticipation extends BaseModel {\n  /**\n   * Creates a new `AccountParticipation` object.\n   * @param selectionParticipationKey - (sel) Selection public key (if any) currently registered for this round.\n   * @param voteFirstValid - (voteFst) First round for which this participation is valid.\n   * @param voteKeyDilution - (voteKD) Number of subkeys in each batch of participation keys.\n   * @param voteLastValid - (voteLst) Last round for which this participation is valid.\n   * @param voteParticipationKey - (vote) root participation public key (if any) currently registered for this\n   * round.\n   * @param stateProofKey - (stprf) Root of the state proof key (if any)\n   */\n  constructor(_ref4) {\n    let {\n      selectionParticipationKey,\n      voteFirstValid,\n      voteKeyDilution,\n      voteLastValid,\n      voteParticipationKey,\n      stateProofKey\n    } = _ref4;\n    super();\n    this.selectionParticipationKey = typeof selectionParticipationKey === 'string' ? new Uint8Array(Buffer.from(selectionParticipationKey, 'base64')) : selectionParticipationKey;\n    this.voteFirstValid = voteFirstValid;\n    this.voteKeyDilution = voteKeyDilution;\n    this.voteLastValid = voteLastValid;\n    this.voteParticipationKey = typeof voteParticipationKey === 'string' ? new Uint8Array(Buffer.from(voteParticipationKey, 'base64')) : voteParticipationKey;\n    this.stateProofKey = typeof stateProofKey === 'string' ? new Uint8Array(Buffer.from(stateProofKey, 'base64')) : stateProofKey;\n    this.attribute_map = {\n      selectionParticipationKey: 'selection-participation-key',\n      voteFirstValid: 'vote-first-valid',\n      voteKeyDilution: 'vote-key-dilution',\n      voteLastValid: 'vote-last-valid',\n      voteParticipationKey: 'vote-participation-key',\n      stateProofKey: 'state-proof-key'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['selection-participation-key'] === 'undefined') throw new Error(`Response is missing required field 'selection-participation-key': ${data}`);\n    if (typeof data['vote-first-valid'] === 'undefined') throw new Error(`Response is missing required field 'vote-first-valid': ${data}`);\n    if (typeof data['vote-key-dilution'] === 'undefined') throw new Error(`Response is missing required field 'vote-key-dilution': ${data}`);\n    if (typeof data['vote-last-valid'] === 'undefined') throw new Error(`Response is missing required field 'vote-last-valid': ${data}`);\n    if (typeof data['vote-participation-key'] === 'undefined') throw new Error(`Response is missing required field 'vote-participation-key': ${data}`);\n    return new AccountParticipation({\n      selectionParticipationKey: data['selection-participation-key'],\n      voteFirstValid: data['vote-first-valid'],\n      voteKeyDilution: data['vote-key-dilution'],\n      voteLastValid: data['vote-last-valid'],\n      voteParticipationKey: data['vote-participation-key'],\n      stateProofKey: data['state-proof-key']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Application state delta.\n */\nexport class AccountStateDelta extends BaseModel {\n  /**\n   * Creates a new `AccountStateDelta` object.\n   * @param address -\n   * @param delta - Application state delta.\n   */\n  constructor(_ref5) {\n    let {\n      address,\n      delta\n    } = _ref5;\n    super();\n    this.address = address;\n    this.delta = delta;\n    this.attribute_map = {\n      address: 'address',\n      delta: 'delta'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined') throw new Error(`Response is missing required field 'address': ${data}`);\n    if (!Array.isArray(data['delta'])) throw new Error(`Response is missing required array field 'delta': ${data}`);\n    return new AccountStateDelta({\n      address: data['address'],\n      delta: data['delta'].map(EvalDeltaKeyValue.from_obj_for_encoding)\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Application index and its parameters\n */\nexport class Application extends BaseModel {\n  /**\n   * Creates a new `Application` object.\n   * @param id - (appidx) application index.\n   * @param params - (appparams) application parameters.\n   */\n  constructor(_ref6) {\n    let {\n      id,\n      params\n    } = _ref6;\n    super();\n    this.id = id;\n    this.params = params;\n    this.attribute_map = {\n      id: 'id',\n      params: 'params'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['id'] === 'undefined') throw new Error(`Response is missing required field 'id': ${data}`);\n    if (typeof data['params'] === 'undefined') throw new Error(`Response is missing required field 'params': ${data}`);\n    return new Application({\n      id: data['id'],\n      params: ApplicationParams.from_obj_for_encoding(data['params'])\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Stores local state associated with an application.\n */\nexport class ApplicationLocalState extends BaseModel {\n  /**\n   * Creates a new `ApplicationLocalState` object.\n   * @param id - The application which this local state is for.\n   * @param schema - (hsch) schema.\n   * @param keyValue - (tkv) storage.\n   */\n  constructor(_ref7) {\n    let {\n      id,\n      schema,\n      keyValue\n    } = _ref7;\n    super();\n    this.id = id;\n    this.schema = schema;\n    this.keyValue = keyValue;\n    this.attribute_map = {\n      id: 'id',\n      schema: 'schema',\n      keyValue: 'key-value'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['id'] === 'undefined') throw new Error(`Response is missing required field 'id': ${data}`);\n    if (typeof data['schema'] === 'undefined') throw new Error(`Response is missing required field 'schema': ${data}`);\n    return new ApplicationLocalState({\n      id: data['id'],\n      schema: ApplicationStateSchema.from_obj_for_encoding(data['schema']),\n      keyValue: typeof data['key-value'] !== 'undefined' ? data['key-value'].map(TealKeyValue.from_obj_for_encoding) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Stores the global information associated with an application.\n */\nexport class ApplicationParams extends BaseModel {\n  /**\n   * Creates a new `ApplicationParams` object.\n   * @param approvalProgram - (approv) approval program.\n   * @param clearStateProgram - (clearp) approval program.\n   * @param creator - The address that created this application. This is the address where the\n   * parameters and global state for this application can be found.\n   * @param extraProgramPages - (epp) the amount of extra program pages available to this app.\n   * @param globalState - [\\gs) global schema\n   * @param globalStateSchema - [\\gsch) global schema\n   * @param localStateSchema - [\\lsch) local schema\n   */\n  constructor(_ref8) {\n    let {\n      approvalProgram,\n      clearStateProgram,\n      creator,\n      extraProgramPages,\n      globalState,\n      globalStateSchema,\n      localStateSchema\n    } = _ref8;\n    super();\n    this.approvalProgram = typeof approvalProgram === 'string' ? new Uint8Array(Buffer.from(approvalProgram, 'base64')) : approvalProgram;\n    this.clearStateProgram = typeof clearStateProgram === 'string' ? new Uint8Array(Buffer.from(clearStateProgram, 'base64')) : clearStateProgram;\n    this.creator = creator;\n    this.extraProgramPages = extraProgramPages;\n    this.globalState = globalState;\n    this.globalStateSchema = globalStateSchema;\n    this.localStateSchema = localStateSchema;\n    this.attribute_map = {\n      approvalProgram: 'approval-program',\n      clearStateProgram: 'clear-state-program',\n      creator: 'creator',\n      extraProgramPages: 'extra-program-pages',\n      globalState: 'global-state',\n      globalStateSchema: 'global-state-schema',\n      localStateSchema: 'local-state-schema'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['approval-program'] === 'undefined') throw new Error(`Response is missing required field 'approval-program': ${data}`);\n    if (typeof data['clear-state-program'] === 'undefined') throw new Error(`Response is missing required field 'clear-state-program': ${data}`);\n    if (typeof data['creator'] === 'undefined') throw new Error(`Response is missing required field 'creator': ${data}`);\n    return new ApplicationParams({\n      approvalProgram: data['approval-program'],\n      clearStateProgram: data['clear-state-program'],\n      creator: data['creator'],\n      extraProgramPages: data['extra-program-pages'],\n      globalState: typeof data['global-state'] !== 'undefined' ? data['global-state'].map(TealKeyValue.from_obj_for_encoding) : undefined,\n      globalStateSchema: typeof data['global-state-schema'] !== 'undefined' ? ApplicationStateSchema.from_obj_for_encoding(data['global-state-schema']) : undefined,\n      localStateSchema: typeof data['local-state-schema'] !== 'undefined' ? ApplicationStateSchema.from_obj_for_encoding(data['local-state-schema']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Specifies maximums on the number of each type that may be stored.\n */\nexport class ApplicationStateSchema extends BaseModel {\n  /**\n   * Creates a new `ApplicationStateSchema` object.\n   * @param numUint - (nui) num of uints.\n   * @param numByteSlice - (nbs) num of byte slices.\n   */\n  constructor(_ref9) {\n    let {\n      numUint,\n      numByteSlice\n    } = _ref9;\n    super();\n    this.numUint = numUint;\n    this.numByteSlice = numByteSlice;\n    this.attribute_map = {\n      numUint: 'num-uint',\n      numByteSlice: 'num-byte-slice'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['num-uint'] === 'undefined') throw new Error(`Response is missing required field 'num-uint': ${data}`);\n    if (typeof data['num-byte-slice'] === 'undefined') throw new Error(`Response is missing required field 'num-byte-slice': ${data}`);\n    return new ApplicationStateSchema({\n      numUint: data['num-uint'],\n      numByteSlice: data['num-byte-slice']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Specifies both the unique identifier and the parameters for an asset\n */\nexport class Asset extends BaseModel {\n  /**\n   * Creates a new `Asset` object.\n   * @param index - unique asset identifier\n   * @param params - AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   */\n  constructor(_ref10) {\n    let {\n      index,\n      params\n    } = _ref10;\n    super();\n    this.index = index;\n    this.params = params;\n    this.attribute_map = {\n      index: 'index',\n      params: 'params'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['index'] === 'undefined') throw new Error(`Response is missing required field 'index': ${data}`);\n    if (typeof data['params'] === 'undefined') throw new Error(`Response is missing required field 'params': ${data}`);\n    return new Asset({\n      index: data['index'],\n      params: AssetParams.from_obj_for_encoding(data['params'])\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Describes an asset held by an account.\n * Definition:\n * data/basics/userBalance.go : AssetHolding\n */\nexport class AssetHolding extends BaseModel {\n  /**\n   * Creates a new `AssetHolding` object.\n   * @param amount - (a) number of units held.\n   * @param assetId - Asset ID of the holding.\n   * @param isFrozen - (f) whether or not the holding is frozen.\n   */\n  constructor(_ref11) {\n    let {\n      amount,\n      assetId,\n      isFrozen\n    } = _ref11;\n    super();\n    this.amount = amount;\n    this.assetId = assetId;\n    this.isFrozen = isFrozen;\n    this.attribute_map = {\n      amount: 'amount',\n      assetId: 'asset-id',\n      isFrozen: 'is-frozen'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['amount'] === 'undefined') throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['asset-id'] === 'undefined') throw new Error(`Response is missing required field 'asset-id': ${data}`);\n    if (typeof data['is-frozen'] === 'undefined') throw new Error(`Response is missing required field 'is-frozen': ${data}`);\n    return new AssetHolding({\n      amount: data['amount'],\n      assetId: data['asset-id'],\n      isFrozen: data['is-frozen']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * AssetParams specifies the parameters for an asset.\n * (apar) when part of an AssetConfig transaction.\n * Definition:\n * data/transactions/asset.go : AssetParams\n */\nexport class AssetParams extends BaseModel {\n  /**\n   * Creates a new `AssetParams` object.\n   * @param creator - The address that created this asset. This is the address where the parameters\n   * for this asset can be found, and also the address where unwanted asset units can\n   * be sent in the worst case.\n   * @param decimals - (dc) The number of digits to use after the decimal point when displaying this\n   * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\n   * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\n   * must be between 0 and 19 (inclusive).\n   * @param total - (t) The total number of units of this asset.\n   * @param clawback - (c) Address of account used to clawback holdings of this asset. If empty,\n   * clawback is not permitted.\n   * @param defaultFrozen - (df) Whether holdings of this asset are frozen by default.\n   * @param freeze - (f) Address of account used to freeze holdings of this asset. If empty, freezing\n   * is not permitted.\n   * @param manager - (m) Address of account used to manage the keys of this asset and to destroy it.\n   * @param metadataHash - (am) A commitment to some unspecified asset metadata. The format of this\n   * metadata is up to the application.\n   * @param name - (an) Name of this asset, as supplied by the creator. Included only when the\n   * asset name is composed of printable utf-8 characters.\n   * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\n   * @param reserve - (r) Address of account holding reserve (non-minted) units of this asset.\n   * @param unitName - (un) Name of a unit of this asset, as supplied by the creator. Included only\n   * when the name of a unit of this asset is composed of printable utf-8 characters.\n   * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\n   * @param url - (au) URL where more information about the asset can be retrieved. Included only\n   * when the URL is composed of printable utf-8 characters.\n   * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\n   */\n  constructor(_ref12) {\n    let {\n      creator,\n      decimals,\n      total,\n      clawback,\n      defaultFrozen,\n      freeze,\n      manager,\n      metadataHash,\n      name,\n      nameB64,\n      reserve,\n      unitName,\n      unitNameB64,\n      url,\n      urlB64\n    } = _ref12;\n    super();\n    this.creator = creator;\n    this.decimals = decimals;\n    this.total = total;\n    this.clawback = clawback;\n    this.defaultFrozen = defaultFrozen;\n    this.freeze = freeze;\n    this.manager = manager;\n    this.metadataHash = typeof metadataHash === 'string' ? new Uint8Array(Buffer.from(metadataHash, 'base64')) : metadataHash;\n    this.name = name;\n    this.nameB64 = typeof nameB64 === 'string' ? new Uint8Array(Buffer.from(nameB64, 'base64')) : nameB64;\n    this.reserve = reserve;\n    this.unitName = unitName;\n    this.unitNameB64 = typeof unitNameB64 === 'string' ? new Uint8Array(Buffer.from(unitNameB64, 'base64')) : unitNameB64;\n    this.url = url;\n    this.urlB64 = typeof urlB64 === 'string' ? new Uint8Array(Buffer.from(urlB64, 'base64')) : urlB64;\n    this.attribute_map = {\n      creator: 'creator',\n      decimals: 'decimals',\n      total: 'total',\n      clawback: 'clawback',\n      defaultFrozen: 'default-frozen',\n      freeze: 'freeze',\n      manager: 'manager',\n      metadataHash: 'metadata-hash',\n      name: 'name',\n      nameB64: 'name-b64',\n      reserve: 'reserve',\n      unitName: 'unit-name',\n      unitNameB64: 'unit-name-b64',\n      url: 'url',\n      urlB64: 'url-b64'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['creator'] === 'undefined') throw new Error(`Response is missing required field 'creator': ${data}`);\n    if (typeof data['decimals'] === 'undefined') throw new Error(`Response is missing required field 'decimals': ${data}`);\n    if (typeof data['total'] === 'undefined') throw new Error(`Response is missing required field 'total': ${data}`);\n    return new AssetParams({\n      creator: data['creator'],\n      decimals: data['decimals'],\n      total: data['total'],\n      clawback: data['clawback'],\n      defaultFrozen: data['default-frozen'],\n      freeze: data['freeze'],\n      manager: data['manager'],\n      metadataHash: data['metadata-hash'],\n      name: data['name'],\n      nameB64: data['name-b64'],\n      reserve: data['reserve'],\n      unitName: data['unit-name'],\n      unitNameB64: data['unit-name-b64'],\n      url: data['url'],\n      urlB64: data['url-b64']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Hash of a block header.\n */\nexport class BlockHashResponse extends BaseModel {\n  /**\n   * Creates a new `BlockHashResponse` object.\n   * @param blockhash - Block header hash.\n   */\n  constructor(_ref13) {\n    let {\n      blockhash\n    } = _ref13;\n    super();\n    this.blockhash = blockhash;\n    this.attribute_map = {\n      blockhash: 'blockHash'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['blockHash'] === 'undefined') throw new Error(`Response is missing required field 'blockHash': ${data}`);\n    return new BlockHashResponse({\n      blockhash: data['blockHash']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Encoded block object.\n */\nexport class BlockResponse extends BaseModel {\n  /**\n   * Creates a new `BlockResponse` object.\n   * @param block - Block header data.\n   * @param cert - Optional certificate object. This is only included when the format is set to\n   * message pack.\n   */\n  constructor(_ref14) {\n    let {\n      block,\n      cert\n    } = _ref14;\n    super();\n    this.block = block;\n    this.cert = cert;\n    this.attribute_map = {\n      block: 'block',\n      cert: 'cert'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['block'] === 'undefined') throw new Error(`Response is missing required field 'block': ${data}`);\n    return new BlockResponse({\n      block: data['block'],\n      cert: data['cert']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Box name and its content.\n */\nexport class Box extends BaseModel {\n  /**\n   * Creates a new `Box` object.\n   * @param name - (name) box name, base64 encoded\n   * @param value - (value) box value, base64 encoded.\n   */\n  constructor(_ref15) {\n    let {\n      name,\n      value\n    } = _ref15;\n    super();\n    this.name = typeof name === 'string' ? new Uint8Array(Buffer.from(name, 'base64')) : name;\n    this.value = typeof value === 'string' ? new Uint8Array(Buffer.from(value, 'base64')) : value;\n    this.attribute_map = {\n      name: 'name',\n      value: 'value'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['name'] === 'undefined') throw new Error(`Response is missing required field 'name': ${data}`);\n    if (typeof data['value'] === 'undefined') throw new Error(`Response is missing required field 'value': ${data}`);\n    return new Box({\n      name: data['name'],\n      value: data['value']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Box descriptor describes a Box.\n */\nexport class BoxDescriptor extends BaseModel {\n  /**\n   * Creates a new `BoxDescriptor` object.\n   * @param name - Base64 encoded box name\n   */\n  constructor(_ref16) {\n    let {\n      name\n    } = _ref16;\n    super();\n    this.name = typeof name === 'string' ? new Uint8Array(Buffer.from(name, 'base64')) : name;\n    this.attribute_map = {\n      name: 'name'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['name'] === 'undefined') throw new Error(`Response is missing required field 'name': ${data}`);\n    return new BoxDescriptor({\n      name: data['name']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Box names of an application\n */\nexport class BoxesResponse extends BaseModel {\n  /**\n   * Creates a new `BoxesResponse` object.\n   * @param boxes -\n   */\n  constructor(_ref17) {\n    let {\n      boxes\n    } = _ref17;\n    super();\n    this.boxes = boxes;\n    this.attribute_map = {\n      boxes: 'boxes'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['boxes'])) throw new Error(`Response is missing required array field 'boxes': ${data}`);\n    return new BoxesResponse({\n      boxes: data['boxes'].map(BoxDescriptor.from_obj_for_encoding)\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class BuildVersion extends BaseModel {\n  /**\n   * Creates a new `BuildVersion` object.\n   * @param branch -\n   * @param buildNumber -\n   * @param channel -\n   * @param commitHash -\n   * @param major -\n   * @param minor -\n   */\n  constructor(_ref18) {\n    let {\n      branch,\n      buildNumber,\n      channel,\n      commitHash,\n      major,\n      minor\n    } = _ref18;\n    super();\n    this.branch = branch;\n    this.buildNumber = buildNumber;\n    this.channel = channel;\n    this.commitHash = commitHash;\n    this.major = major;\n    this.minor = minor;\n    this.attribute_map = {\n      branch: 'branch',\n      buildNumber: 'build_number',\n      channel: 'channel',\n      commitHash: 'commit_hash',\n      major: 'major',\n      minor: 'minor'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['branch'] === 'undefined') throw new Error(`Response is missing required field 'branch': ${data}`);\n    if (typeof data['build_number'] === 'undefined') throw new Error(`Response is missing required field 'build_number': ${data}`);\n    if (typeof data['channel'] === 'undefined') throw new Error(`Response is missing required field 'channel': ${data}`);\n    if (typeof data['commit_hash'] === 'undefined') throw new Error(`Response is missing required field 'commit_hash': ${data}`);\n    if (typeof data['major'] === 'undefined') throw new Error(`Response is missing required field 'major': ${data}`);\n    if (typeof data['minor'] === 'undefined') throw new Error(`Response is missing required field 'minor': ${data}`);\n    return new BuildVersion({\n      branch: data['branch'],\n      buildNumber: data['build_number'],\n      channel: data['channel'],\n      commitHash: data['commit_hash'],\n      major: data['major'],\n      minor: data['minor']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Teal compile Result\n */\nexport class CompileResponse extends BaseModel {\n  /**\n   * Creates a new `CompileResponse` object.\n   * @param hash - base32 SHA512_256 of program bytes (Address style)\n   * @param result - base64 encoded program bytes\n   * @param sourcemap - JSON of the source map\n   */\n  constructor(_ref19) {\n    let {\n      hash,\n      result,\n      sourcemap\n    } = _ref19;\n    super();\n    this.hash = hash;\n    this.result = result;\n    this.sourcemap = sourcemap;\n    this.attribute_map = {\n      hash: 'hash',\n      result: 'result',\n      sourcemap: 'sourcemap'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['hash'] === 'undefined') throw new Error(`Response is missing required field 'hash': ${data}`);\n    if (typeof data['result'] === 'undefined') throw new Error(`Response is missing required field 'result': ${data}`);\n    return new CompileResponse({\n      hash: data['hash'],\n      result: data['result'],\n      sourcemap: data['sourcemap']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Teal disassembly Result\n */\nexport class DisassembleResponse extends BaseModel {\n  /**\n   * Creates a new `DisassembleResponse` object.\n   * @param result - disassembled Teal code\n   */\n  constructor(_ref20) {\n    let {\n      result\n    } = _ref20;\n    super();\n    this.result = result;\n    this.attribute_map = {\n      result: 'result'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['result'] === 'undefined') throw new Error(`Response is missing required field 'result': ${data}`);\n    return new DisassembleResponse({\n      result: data['result']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Request data type for dryrun endpoint. Given the Transactions and simulated\n * ledger state upload, run TEAL scripts and return debugging information.\n */\nexport class DryrunRequest extends BaseModel {\n  /**\n   * Creates a new `DryrunRequest` object.\n   * @param accounts -\n   * @param apps -\n   * @param latestTimestamp - LatestTimestamp is available to some TEAL scripts. Defaults to the latest\n   * confirmed timestamp this algod is attached to.\n   * @param protocolVersion - ProtocolVersion specifies a specific version string to operate under, otherwise\n   * whatever the current protocol of the network this algod is running in.\n   * @param round - Round is available to some TEAL scripts. Defaults to the current round on the\n   * network this algod is attached to.\n   * @param sources -\n   * @param txns -\n   */\n  constructor(_ref21) {\n    let {\n      accounts,\n      apps,\n      latestTimestamp,\n      protocolVersion,\n      round,\n      sources,\n      txns\n    } = _ref21;\n    super();\n    this.accounts = accounts;\n    this.apps = apps;\n    this.latestTimestamp = latestTimestamp;\n    this.protocolVersion = protocolVersion;\n    this.round = round;\n    this.sources = sources;\n    this.txns = txns;\n    this.attribute_map = {\n      accounts: 'accounts',\n      apps: 'apps',\n      latestTimestamp: 'latest-timestamp',\n      protocolVersion: 'protocol-version',\n      round: 'round',\n      sources: 'sources',\n      txns: 'txns'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['accounts'])) throw new Error(`Response is missing required array field 'accounts': ${data}`);\n    if (!Array.isArray(data['apps'])) throw new Error(`Response is missing required array field 'apps': ${data}`);\n    if (typeof data['latest-timestamp'] === 'undefined') throw new Error(`Response is missing required field 'latest-timestamp': ${data}`);\n    if (typeof data['protocol-version'] === 'undefined') throw new Error(`Response is missing required field 'protocol-version': ${data}`);\n    if (typeof data['round'] === 'undefined') throw new Error(`Response is missing required field 'round': ${data}`);\n    if (!Array.isArray(data['sources'])) throw new Error(`Response is missing required array field 'sources': ${data}`);\n    if (!Array.isArray(data['txns'])) throw new Error(`Response is missing required array field 'txns': ${data}`);\n    return new DryrunRequest({\n      accounts: data['accounts'].map(Account.from_obj_for_encoding),\n      apps: data['apps'].map(Application.from_obj_for_encoding),\n      latestTimestamp: data['latest-timestamp'],\n      protocolVersion: data['protocol-version'],\n      round: data['round'],\n      sources: data['sources'].map(DryrunSource.from_obj_for_encoding),\n      txns: data['txns']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * DryrunResponse contains per-txn debug information from a dryrun.\n */\nexport class DryrunResponse extends BaseModel {\n  /**\n   * Creates a new `DryrunResponse` object.\n   * @param error -\n   * @param protocolVersion - Protocol version is the protocol version Dryrun was operated under.\n   * @param txns -\n   */\n  constructor(_ref22) {\n    let {\n      error,\n      protocolVersion,\n      txns\n    } = _ref22;\n    super();\n    this.error = error;\n    this.protocolVersion = protocolVersion;\n    this.txns = txns;\n    this.attribute_map = {\n      error: 'error',\n      protocolVersion: 'protocol-version',\n      txns: 'txns'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['error'] === 'undefined') throw new Error(`Response is missing required field 'error': ${data}`);\n    if (typeof data['protocol-version'] === 'undefined') throw new Error(`Response is missing required field 'protocol-version': ${data}`);\n    if (!Array.isArray(data['txns'])) throw new Error(`Response is missing required array field 'txns': ${data}`);\n    return new DryrunResponse({\n      error: data['error'],\n      protocolVersion: data['protocol-version'],\n      txns: data['txns'].map(DryrunTxnResult.from_obj_for_encoding)\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * DryrunSource is TEAL source text that gets uploaded, compiled, and inserted into\n * transactions or application state.\n */\nexport class DryrunSource extends BaseModel {\n  /**\n   * Creates a new `DryrunSource` object.\n   * @param fieldName - FieldName is what kind of sources this is. If lsig then it goes into the\n   * transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the\n   * Approval Program or Clear State Program of application[this.AppIndex].\n   * @param source -\n   * @param txnIndex -\n   * @param appIndex -\n   */\n  constructor(_ref23) {\n    let {\n      fieldName,\n      source,\n      txnIndex,\n      appIndex\n    } = _ref23;\n    super();\n    this.fieldName = fieldName;\n    this.source = source;\n    this.txnIndex = txnIndex;\n    this.appIndex = appIndex;\n    this.attribute_map = {\n      fieldName: 'field-name',\n      source: 'source',\n      txnIndex: 'txn-index',\n      appIndex: 'app-index'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['field-name'] === 'undefined') throw new Error(`Response is missing required field 'field-name': ${data}`);\n    if (typeof data['source'] === 'undefined') throw new Error(`Response is missing required field 'source': ${data}`);\n    if (typeof data['txn-index'] === 'undefined') throw new Error(`Response is missing required field 'txn-index': ${data}`);\n    if (typeof data['app-index'] === 'undefined') throw new Error(`Response is missing required field 'app-index': ${data}`);\n    return new DryrunSource({\n      fieldName: data['field-name'],\n      source: data['source'],\n      txnIndex: data['txn-index'],\n      appIndex: data['app-index']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Stores the TEAL eval step data\n */\nexport class DryrunState extends BaseModel {\n  /**\n   * Creates a new `DryrunState` object.\n   * @param line - Line number\n   * @param pc - Program counter\n   * @param stack -\n   * @param error - Evaluation error if any\n   * @param scratch -\n   */\n  constructor(_ref24) {\n    let {\n      line,\n      pc,\n      stack,\n      error,\n      scratch\n    } = _ref24;\n    super();\n    this.line = line;\n    this.pc = pc;\n    this.stack = stack;\n    this.error = error;\n    this.scratch = scratch;\n    this.attribute_map = {\n      line: 'line',\n      pc: 'pc',\n      stack: 'stack',\n      error: 'error',\n      scratch: 'scratch'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['line'] === 'undefined') throw new Error(`Response is missing required field 'line': ${data}`);\n    if (typeof data['pc'] === 'undefined') throw new Error(`Response is missing required field 'pc': ${data}`);\n    if (!Array.isArray(data['stack'])) throw new Error(`Response is missing required array field 'stack': ${data}`);\n    return new DryrunState({\n      line: data['line'],\n      pc: data['pc'],\n      stack: data['stack'].map(TealValue.from_obj_for_encoding),\n      error: data['error'],\n      scratch: typeof data['scratch'] !== 'undefined' ? data['scratch'].map(TealValue.from_obj_for_encoding) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * DryrunTxnResult contains any LogicSig or ApplicationCall program debug\n * information and state updates from a dryrun.\n */\nexport class DryrunTxnResult extends BaseModel {\n  /**\n   * Creates a new `DryrunTxnResult` object.\n   * @param disassembly - Disassembled program line by line.\n   * @param appCallMessages -\n   * @param appCallTrace -\n   * @param budgetAdded - Budget added during execution of app call transaction.\n   * @param budgetConsumed - Budget consumed during execution of app call transaction.\n   * @param globalDelta - Application state delta.\n   * @param localDeltas -\n   * @param logicSigDisassembly - Disassembled lsig program line by line.\n   * @param logicSigMessages -\n   * @param logicSigTrace -\n   * @param logs -\n   */\n  constructor(_ref25) {\n    let {\n      disassembly,\n      appCallMessages,\n      appCallTrace,\n      budgetAdded,\n      budgetConsumed,\n      globalDelta,\n      localDeltas,\n      logicSigDisassembly,\n      logicSigMessages,\n      logicSigTrace,\n      logs\n    } = _ref25;\n    super();\n    this.disassembly = disassembly;\n    this.appCallMessages = appCallMessages;\n    this.appCallTrace = appCallTrace;\n    this.budgetAdded = budgetAdded;\n    this.budgetConsumed = budgetConsumed;\n    this.globalDelta = globalDelta;\n    this.localDeltas = localDeltas;\n    this.logicSigDisassembly = logicSigDisassembly;\n    this.logicSigMessages = logicSigMessages;\n    this.logicSigTrace = logicSigTrace;\n    this.logs = logs;\n    this.attribute_map = {\n      disassembly: 'disassembly',\n      appCallMessages: 'app-call-messages',\n      appCallTrace: 'app-call-trace',\n      budgetAdded: 'budget-added',\n      budgetConsumed: 'budget-consumed',\n      globalDelta: 'global-delta',\n      localDeltas: 'local-deltas',\n      logicSigDisassembly: 'logic-sig-disassembly',\n      logicSigMessages: 'logic-sig-messages',\n      logicSigTrace: 'logic-sig-trace',\n      logs: 'logs'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['disassembly'])) throw new Error(`Response is missing required array field 'disassembly': ${data}`);\n    return new DryrunTxnResult({\n      disassembly: data['disassembly'],\n      appCallMessages: data['app-call-messages'],\n      appCallTrace: typeof data['app-call-trace'] !== 'undefined' ? data['app-call-trace'].map(DryrunState.from_obj_for_encoding) : undefined,\n      budgetAdded: data['budget-added'],\n      budgetConsumed: data['budget-consumed'],\n      globalDelta: typeof data['global-delta'] !== 'undefined' ? data['global-delta'].map(EvalDeltaKeyValue.from_obj_for_encoding) : undefined,\n      localDeltas: typeof data['local-deltas'] !== 'undefined' ? data['local-deltas'].map(AccountStateDelta.from_obj_for_encoding) : undefined,\n      logicSigDisassembly: data['logic-sig-disassembly'],\n      logicSigMessages: data['logic-sig-messages'],\n      logicSigTrace: typeof data['logic-sig-trace'] !== 'undefined' ? data['logic-sig-trace'].map(DryrunState.from_obj_for_encoding) : undefined,\n      logs: data['logs']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * An error response with optional data field.\n */\nexport class ErrorResponse extends BaseModel {\n  /**\n   * Creates a new `ErrorResponse` object.\n   * @param message -\n   * @param data -\n   */\n  constructor(_ref26) {\n    let {\n      message,\n      data\n    } = _ref26;\n    super();\n    this.message = message;\n    this.data = data;\n    this.attribute_map = {\n      message: 'message',\n      data: 'data'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['message'] === 'undefined') throw new Error(`Response is missing required field 'message': ${data}`);\n    return new ErrorResponse({\n      message: data['message'],\n      data: data['data']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Represents a TEAL value delta.\n */\nexport class EvalDelta extends BaseModel {\n  /**\n   * Creates a new `EvalDelta` object.\n   * @param action - (at) delta action.\n   * @param bytes - (bs) bytes value.\n   * @param uint - (ui) uint value.\n   */\n  constructor(_ref27) {\n    let {\n      action,\n      bytes,\n      uint\n    } = _ref27;\n    super();\n    this.action = action;\n    this.bytes = bytes;\n    this.uint = uint;\n    this.attribute_map = {\n      action: 'action',\n      bytes: 'bytes',\n      uint: 'uint'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['action'] === 'undefined') throw new Error(`Response is missing required field 'action': ${data}`);\n    return new EvalDelta({\n      action: data['action'],\n      bytes: data['bytes'],\n      uint: data['uint']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Key-value pairs for StateDelta.\n */\nexport class EvalDeltaKeyValue extends BaseModel {\n  /**\n   * Creates a new `EvalDeltaKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value delta.\n   */\n  constructor(_ref28) {\n    let {\n      key,\n      value\n    } = _ref28;\n    super();\n    this.key = key;\n    this.value = value;\n    this.attribute_map = {\n      key: 'key',\n      value: 'value'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['key'] === 'undefined') throw new Error(`Response is missing required field 'key': ${data}`);\n    if (typeof data['value'] === 'undefined') throw new Error(`Response is missing required field 'value': ${data}`);\n    return new EvalDeltaKeyValue({\n      key: data['key'],\n      value: EvalDelta.from_obj_for_encoding(data['value'])\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Proof of membership and position of a light block header.\n */\nexport class LightBlockHeaderProof extends BaseModel {\n  /**\n   * Creates a new `LightBlockHeaderProof` object.\n   * @param index - The index of the light block header in the vector commitment tree\n   * @param proof - The encoded proof.\n   * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\n   * from a leaf to the root.\n   */\n  constructor(_ref29) {\n    let {\n      index,\n      proof,\n      treedepth\n    } = _ref29;\n    super();\n    this.index = index;\n    this.proof = typeof proof === 'string' ? new Uint8Array(Buffer.from(proof, 'base64')) : proof;\n    this.treedepth = treedepth;\n    this.attribute_map = {\n      index: 'index',\n      proof: 'proof',\n      treedepth: 'treedepth'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['index'] === 'undefined') throw new Error(`Response is missing required field 'index': ${data}`);\n    if (typeof data['proof'] === 'undefined') throw new Error(`Response is missing required field 'proof': ${data}`);\n    if (typeof data['treedepth'] === 'undefined') throw new Error(`Response is missing required field 'treedepth': ${data}`);\n    return new LightBlockHeaderProof({\n      index: data['index'],\n      proof: data['proof'],\n      treedepth: data['treedepth']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n *\n */\nexport class NodeStatusResponse extends BaseModel {\n  /**\n   * Creates a new `NodeStatusResponse` object.\n   * @param catchupTime - CatchupTime in nanoseconds\n   * @param lastRound - LastRound indicates the last round seen\n   * @param lastVersion - LastVersion indicates the last consensus version supported\n   * @param nextVersion - NextVersion of consensus protocol to use\n   * @param nextVersionRound - NextVersionRound is the round at which the next consensus version will apply\n   * @param nextVersionSupported - NextVersionSupported indicates whether the next consensus version is supported\n   * by this node\n   * @param stoppedAtUnsupportedRound - StoppedAtUnsupportedRound indicates that the node does not support the new\n   * rounds and has stopped making progress\n   * @param timeSinceLastRound - TimeSinceLastRound in nanoseconds\n   * @param catchpoint - The current catchpoint that is being caught up to\n   * @param catchpointAcquiredBlocks - The number of blocks that have already been obtained by the node as part of the\n   * catchup\n   * @param catchpointProcessedAccounts - The number of accounts from the current catchpoint that have been processed so\n   * far as part of the catchup\n   * @param catchpointProcessedKvs - The number of key-values (KVs) from the current catchpoint that have been\n   * processed so far as part of the catchup\n   * @param catchpointTotalAccounts - The total number of accounts included in the current catchpoint\n   * @param catchpointTotalBlocks - The total number of blocks that are required to complete the current catchpoint\n   * catchup\n   * @param catchpointTotalKvs - The total number of key-values (KVs) included in the current catchpoint\n   * @param catchpointVerifiedAccounts - The number of accounts from the current catchpoint that have been verified so\n   * far as part of the catchup\n   * @param catchpointVerifiedKvs - The number of key-values (KVs) from the current catchpoint that have been\n   * verified so far as part of the catchup\n   * @param lastCatchpoint - The last catchpoint seen by the node\n   */\n  constructor(_ref30) {\n    let {\n      catchupTime,\n      lastRound,\n      lastVersion,\n      nextVersion,\n      nextVersionRound,\n      nextVersionSupported,\n      stoppedAtUnsupportedRound,\n      timeSinceLastRound,\n      catchpoint,\n      catchpointAcquiredBlocks,\n      catchpointProcessedAccounts,\n      catchpointProcessedKvs,\n      catchpointTotalAccounts,\n      catchpointTotalBlocks,\n      catchpointTotalKvs,\n      catchpointVerifiedAccounts,\n      catchpointVerifiedKvs,\n      lastCatchpoint\n    } = _ref30;\n    super();\n    this.catchupTime = catchupTime;\n    this.lastRound = lastRound;\n    this.lastVersion = lastVersion;\n    this.nextVersion = nextVersion;\n    this.nextVersionRound = nextVersionRound;\n    this.nextVersionSupported = nextVersionSupported;\n    this.stoppedAtUnsupportedRound = stoppedAtUnsupportedRound;\n    this.timeSinceLastRound = timeSinceLastRound;\n    this.catchpoint = catchpoint;\n    this.catchpointAcquiredBlocks = catchpointAcquiredBlocks;\n    this.catchpointProcessedAccounts = catchpointProcessedAccounts;\n    this.catchpointProcessedKvs = catchpointProcessedKvs;\n    this.catchpointTotalAccounts = catchpointTotalAccounts;\n    this.catchpointTotalBlocks = catchpointTotalBlocks;\n    this.catchpointTotalKvs = catchpointTotalKvs;\n    this.catchpointVerifiedAccounts = catchpointVerifiedAccounts;\n    this.catchpointVerifiedKvs = catchpointVerifiedKvs;\n    this.lastCatchpoint = lastCatchpoint;\n    this.attribute_map = {\n      catchupTime: 'catchup-time',\n      lastRound: 'last-round',\n      lastVersion: 'last-version',\n      nextVersion: 'next-version',\n      nextVersionRound: 'next-version-round',\n      nextVersionSupported: 'next-version-supported',\n      stoppedAtUnsupportedRound: 'stopped-at-unsupported-round',\n      timeSinceLastRound: 'time-since-last-round',\n      catchpoint: 'catchpoint',\n      catchpointAcquiredBlocks: 'catchpoint-acquired-blocks',\n      catchpointProcessedAccounts: 'catchpoint-processed-accounts',\n      catchpointProcessedKvs: 'catchpoint-processed-kvs',\n      catchpointTotalAccounts: 'catchpoint-total-accounts',\n      catchpointTotalBlocks: 'catchpoint-total-blocks',\n      catchpointTotalKvs: 'catchpoint-total-kvs',\n      catchpointVerifiedAccounts: 'catchpoint-verified-accounts',\n      catchpointVerifiedKvs: 'catchpoint-verified-kvs',\n      lastCatchpoint: 'last-catchpoint'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['catchup-time'] === 'undefined') throw new Error(`Response is missing required field 'catchup-time': ${data}`);\n    if (typeof data['last-round'] === 'undefined') throw new Error(`Response is missing required field 'last-round': ${data}`);\n    if (typeof data['last-version'] === 'undefined') throw new Error(`Response is missing required field 'last-version': ${data}`);\n    if (typeof data['next-version'] === 'undefined') throw new Error(`Response is missing required field 'next-version': ${data}`);\n    if (typeof data['next-version-round'] === 'undefined') throw new Error(`Response is missing required field 'next-version-round': ${data}`);\n    if (typeof data['next-version-supported'] === 'undefined') throw new Error(`Response is missing required field 'next-version-supported': ${data}`);\n    if (typeof data['stopped-at-unsupported-round'] === 'undefined') throw new Error(`Response is missing required field 'stopped-at-unsupported-round': ${data}`);\n    if (typeof data['time-since-last-round'] === 'undefined') throw new Error(`Response is missing required field 'time-since-last-round': ${data}`);\n    return new NodeStatusResponse({\n      catchupTime: data['catchup-time'],\n      lastRound: data['last-round'],\n      lastVersion: data['last-version'],\n      nextVersion: data['next-version'],\n      nextVersionRound: data['next-version-round'],\n      nextVersionSupported: data['next-version-supported'],\n      stoppedAtUnsupportedRound: data['stopped-at-unsupported-round'],\n      timeSinceLastRound: data['time-since-last-round'],\n      catchpoint: data['catchpoint'],\n      catchpointAcquiredBlocks: data['catchpoint-acquired-blocks'],\n      catchpointProcessedAccounts: data['catchpoint-processed-accounts'],\n      catchpointProcessedKvs: data['catchpoint-processed-kvs'],\n      catchpointTotalAccounts: data['catchpoint-total-accounts'],\n      catchpointTotalBlocks: data['catchpoint-total-blocks'],\n      catchpointTotalKvs: data['catchpoint-total-kvs'],\n      catchpointVerifiedAccounts: data['catchpoint-verified-accounts'],\n      catchpointVerifiedKvs: data['catchpoint-verified-kvs'],\n      lastCatchpoint: data['last-catchpoint']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Details about a pending transaction. If the transaction was recently confirmed,\n * includes confirmation details like the round and reward details.\n */\nexport class PendingTransactionResponse extends BaseModel {\n  /**\n   * Creates a new `PendingTransactionResponse` object.\n   * @param poolError - Indicates that the transaction was kicked out of this node's transaction pool\n   * (and specifies why that happened). An empty string indicates the transaction\n   * wasn't kicked out of this node's txpool due to an error.\n   * @param txn - The raw signed transaction.\n   * @param applicationIndex - The application index if the transaction was found and it created an\n   * application.\n   * @param assetClosingAmount - The number of the asset's unit that were transferred to the close-to address.\n   * @param assetIndex - The asset index if the transaction was found and it created an asset.\n   * @param closeRewards - Rewards in microalgos applied to the close remainder to account.\n   * @param closingAmount - Closing amount for the transaction.\n   * @param confirmedRound - The round where this transaction was confirmed, if present.\n   * @param globalStateDelta - (gd) Global state key/value changes for the application being executed by this\n   * transaction.\n   * @param innerTxns - Inner transactions produced by application execution.\n   * @param localStateDelta - (ld) Local state key/value changes for the application being executed by this\n   * transaction.\n   * @param logs - (lg) Logs for the application being executed by this transaction.\n   * @param receiverRewards - Rewards in microalgos applied to the receiver account.\n   * @param senderRewards - Rewards in microalgos applied to the sender account.\n   */\n  constructor(_ref31) {\n    let {\n      poolError,\n      txn,\n      applicationIndex,\n      assetClosingAmount,\n      assetIndex,\n      closeRewards,\n      closingAmount,\n      confirmedRound,\n      globalStateDelta,\n      innerTxns,\n      localStateDelta,\n      logs,\n      receiverRewards,\n      senderRewards\n    } = _ref31;\n    super();\n    this.poolError = poolError;\n    this.txn = txn;\n    this.applicationIndex = applicationIndex;\n    this.assetClosingAmount = assetClosingAmount;\n    this.assetIndex = assetIndex;\n    this.closeRewards = closeRewards;\n    this.closingAmount = closingAmount;\n    this.confirmedRound = confirmedRound;\n    this.globalStateDelta = globalStateDelta;\n    this.innerTxns = innerTxns;\n    this.localStateDelta = localStateDelta;\n    this.logs = logs;\n    this.receiverRewards = receiverRewards;\n    this.senderRewards = senderRewards;\n    this.attribute_map = {\n      poolError: 'pool-error',\n      txn: 'txn',\n      applicationIndex: 'application-index',\n      assetClosingAmount: 'asset-closing-amount',\n      assetIndex: 'asset-index',\n      closeRewards: 'close-rewards',\n      closingAmount: 'closing-amount',\n      confirmedRound: 'confirmed-round',\n      globalStateDelta: 'global-state-delta',\n      innerTxns: 'inner-txns',\n      localStateDelta: 'local-state-delta',\n      logs: 'logs',\n      receiverRewards: 'receiver-rewards',\n      senderRewards: 'sender-rewards'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['pool-error'] === 'undefined') throw new Error(`Response is missing required field 'pool-error': ${data}`);\n    if (typeof data['txn'] === 'undefined') throw new Error(`Response is missing required field 'txn': ${data}`);\n    return new PendingTransactionResponse({\n      poolError: data['pool-error'],\n      txn: data['txn'],\n      applicationIndex: data['application-index'],\n      assetClosingAmount: data['asset-closing-amount'],\n      assetIndex: data['asset-index'],\n      closeRewards: data['close-rewards'],\n      closingAmount: data['closing-amount'],\n      confirmedRound: data['confirmed-round'],\n      globalStateDelta: typeof data['global-state-delta'] !== 'undefined' ? data['global-state-delta'].map(EvalDeltaKeyValue.from_obj_for_encoding) : undefined,\n      innerTxns: typeof data['inner-txns'] !== 'undefined' ? data['inner-txns'].map(PendingTransactionResponse.from_obj_for_encoding) : undefined,\n      localStateDelta: typeof data['local-state-delta'] !== 'undefined' ? data['local-state-delta'].map(AccountStateDelta.from_obj_for_encoding) : undefined,\n      logs: data['logs'],\n      receiverRewards: data['receiver-rewards'],\n      senderRewards: data['sender-rewards']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * A potentially truncated list of transactions currently in the node's transaction\n * pool. You can compute whether or not the list is truncated if the number of\n * elements in the **top-transactions** array is fewer than **total-transactions**.\n */\nexport class PendingTransactionsResponse extends BaseModel {\n  /**\n   * Creates a new `PendingTransactionsResponse` object.\n   * @param topTransactions - An array of signed transaction objects.\n   * @param totalTransactions - Total number of transactions in the pool.\n   */\n  constructor(_ref32) {\n    let {\n      topTransactions,\n      totalTransactions\n    } = _ref32;\n    super();\n    this.topTransactions = topTransactions;\n    this.totalTransactions = totalTransactions;\n    this.attribute_map = {\n      topTransactions: 'top-transactions',\n      totalTransactions: 'total-transactions'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['top-transactions'])) throw new Error(`Response is missing required array field 'top-transactions': ${data}`);\n    if (typeof data['total-transactions'] === 'undefined') throw new Error(`Response is missing required field 'total-transactions': ${data}`);\n    return new PendingTransactionsResponse({\n      topTransactions: data['top-transactions'],\n      totalTransactions: data['total-transactions']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Transaction ID of the submission.\n */\nexport class PostTransactionsResponse extends BaseModel {\n  /**\n   * Creates a new `PostTransactionsResponse` object.\n   * @param txid - encoding of the transaction hash.\n   */\n  constructor(_ref33) {\n    let {\n      txid\n    } = _ref33;\n    super();\n    this.txid = txid;\n    this.attribute_map = {\n      txid: 'txId'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['txId'] === 'undefined') throw new Error(`Response is missing required field 'txId': ${data}`);\n    return new PostTransactionsResponse({\n      txid: data['txId']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Result of a transaction group simulation.\n */\nexport class SimulateResponse extends BaseModel {\n  /**\n   * Creates a new `SimulateResponse` object.\n   * @param lastRound - The round immediately preceding this simulation. State changes through this\n   * round were used to run this simulation.\n   * @param txnGroups - A result object for each transaction group that was simulated.\n   * @param version - The version of this response object.\n   * @param wouldSucceed - Indicates whether the simulated transactions would have succeeded during an\n   * actual submission. If any transaction fails or is missing a signature, this will\n   * be false.\n   */\n  constructor(_ref34) {\n    let {\n      lastRound,\n      txnGroups,\n      version,\n      wouldSucceed\n    } = _ref34;\n    super();\n    this.lastRound = lastRound;\n    this.txnGroups = txnGroups;\n    this.version = version;\n    this.wouldSucceed = wouldSucceed;\n    this.attribute_map = {\n      lastRound: 'last-round',\n      txnGroups: 'txn-groups',\n      version: 'version',\n      wouldSucceed: 'would-succeed'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['last-round'] === 'undefined') throw new Error(`Response is missing required field 'last-round': ${data}`);\n    if (!Array.isArray(data['txn-groups'])) throw new Error(`Response is missing required array field 'txn-groups': ${data}`);\n    if (typeof data['version'] === 'undefined') throw new Error(`Response is missing required field 'version': ${data}`);\n    if (typeof data['would-succeed'] === 'undefined') throw new Error(`Response is missing required field 'would-succeed': ${data}`);\n    return new SimulateResponse({\n      lastRound: data['last-round'],\n      txnGroups: data['txn-groups'].map(SimulateTransactionGroupResult.from_obj_for_encoding),\n      version: data['version'],\n      wouldSucceed: data['would-succeed']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Simulation result for an atomic transaction group\n */\nexport class SimulateTransactionGroupResult extends BaseModel {\n  /**\n   * Creates a new `SimulateTransactionGroupResult` object.\n   * @param txnResults - Simulation result for individual transactions\n   * @param failedAt - If present, indicates which transaction in this group caused the failure. This\n   * array represents the path to the failing transaction. Indexes are zero based,\n   * the first element indicates the top-level transaction, and successive elements\n   * indicate deeper inner transactions.\n   * @param failureMessage - If present, indicates that the transaction group failed and specifies why that\n   * happened\n   */\n  constructor(_ref35) {\n    let {\n      txnResults,\n      failedAt,\n      failureMessage\n    } = _ref35;\n    super();\n    this.txnResults = txnResults;\n    this.failedAt = failedAt;\n    this.failureMessage = failureMessage;\n    this.attribute_map = {\n      txnResults: 'txn-results',\n      failedAt: 'failed-at',\n      failureMessage: 'failure-message'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['txn-results'])) throw new Error(`Response is missing required array field 'txn-results': ${data}`);\n    return new SimulateTransactionGroupResult({\n      txnResults: data['txn-results'].map(SimulateTransactionResult.from_obj_for_encoding),\n      failedAt: data['failed-at'],\n      failureMessage: data['failure-message']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Simulation result for an individual transaction\n */\nexport class SimulateTransactionResult extends BaseModel {\n  /**\n   * Creates a new `SimulateTransactionResult` object.\n   * @param txnResult - Details about a pending transaction. If the transaction was recently confirmed,\n   * includes confirmation details like the round and reward details.\n   * @param missingSignature - A boolean indicating whether this transaction is missing signatures\n   */\n  constructor(_ref36) {\n    let {\n      txnResult,\n      missingSignature\n    } = _ref36;\n    super();\n    this.txnResult = txnResult;\n    this.missingSignature = missingSignature;\n    this.attribute_map = {\n      txnResult: 'txn-result',\n      missingSignature: 'missing-signature'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['txn-result'] === 'undefined') throw new Error(`Response is missing required field 'txn-result': ${data}`);\n    return new SimulateTransactionResult({\n      txnResult: PendingTransactionResponse.from_obj_for_encoding(data['txn-result']),\n      missingSignature: data['missing-signature']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Represents a state proof and its corresponding message\n */\nexport class StateProof extends BaseModel {\n  /**\n   * Creates a new `StateProof` object.\n   * @param message - Represents the message that the state proofs are attesting to.\n   * @param stateproof - The encoded StateProof for the message.\n   */\n  constructor(_ref37) {\n    let {\n      message,\n      stateproof\n    } = _ref37;\n    super();\n    this.message = message;\n    this.stateproof = typeof stateproof === 'string' ? new Uint8Array(Buffer.from(stateproof, 'base64')) : stateproof;\n    this.attribute_map = {\n      message: 'Message',\n      stateproof: 'StateProof'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['Message'] === 'undefined') throw new Error(`Response is missing required field 'Message': ${data}`);\n    if (typeof data['StateProof'] === 'undefined') throw new Error(`Response is missing required field 'StateProof': ${data}`);\n    return new StateProof({\n      message: StateProofMessage.from_obj_for_encoding(data['Message']),\n      stateproof: data['StateProof']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Represents the message that the state proofs are attesting to.\n */\nexport class StateProofMessage extends BaseModel {\n  /**\n   * Creates a new `StateProofMessage` object.\n   * @param blockheaderscommitment - The vector commitment root on all light block headers within a state proof\n   * interval.\n   * @param firstattestedround - The first round the message attests to.\n   * @param lastattestedround - The last round the message attests to.\n   * @param lnprovenweight - An integer value representing the natural log of the proven weight with 16 bits\n   * of precision. This value would be used to verify the next state proof.\n   * @param voterscommitment - The vector commitment root of the top N accounts to sign the next StateProof.\n   */\n  constructor(_ref38) {\n    let {\n      blockheaderscommitment,\n      firstattestedround,\n      lastattestedround,\n      lnprovenweight,\n      voterscommitment\n    } = _ref38;\n    super();\n    this.blockheaderscommitment = typeof blockheaderscommitment === 'string' ? new Uint8Array(Buffer.from(blockheaderscommitment, 'base64')) : blockheaderscommitment;\n    this.firstattestedround = firstattestedround;\n    this.lastattestedround = lastattestedround;\n    this.lnprovenweight = lnprovenweight;\n    this.voterscommitment = typeof voterscommitment === 'string' ? new Uint8Array(Buffer.from(voterscommitment, 'base64')) : voterscommitment;\n    this.attribute_map = {\n      blockheaderscommitment: 'BlockHeadersCommitment',\n      firstattestedround: 'FirstAttestedRound',\n      lastattestedround: 'LastAttestedRound',\n      lnprovenweight: 'LnProvenWeight',\n      voterscommitment: 'VotersCommitment'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['BlockHeadersCommitment'] === 'undefined') throw new Error(`Response is missing required field 'BlockHeadersCommitment': ${data}`);\n    if (typeof data['FirstAttestedRound'] === 'undefined') throw new Error(`Response is missing required field 'FirstAttestedRound': ${data}`);\n    if (typeof data['LastAttestedRound'] === 'undefined') throw new Error(`Response is missing required field 'LastAttestedRound': ${data}`);\n    if (typeof data['LnProvenWeight'] === 'undefined') throw new Error(`Response is missing required field 'LnProvenWeight': ${data}`);\n    if (typeof data['VotersCommitment'] === 'undefined') throw new Error(`Response is missing required field 'VotersCommitment': ${data}`);\n    return new StateProofMessage({\n      blockheaderscommitment: data['BlockHeadersCommitment'],\n      firstattestedround: data['FirstAttestedRound'],\n      lastattestedround: data['LastAttestedRound'],\n      lnprovenweight: data['LnProvenWeight'],\n      voterscommitment: data['VotersCommitment']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Supply represents the current supply of MicroAlgos in the system.\n */\nexport class SupplyResponse extends BaseModel {\n  /**\n   * Creates a new `SupplyResponse` object.\n   * @param currentRound - Round\n   * @param onlineMoney - OnlineMoney\n   * @param totalMoney - TotalMoney\n   */\n  constructor(_ref39) {\n    let {\n      currentRound,\n      onlineMoney,\n      totalMoney\n    } = _ref39;\n    super();\n    this.currentRound = currentRound;\n    this.onlineMoney = onlineMoney;\n    this.totalMoney = totalMoney;\n    this.attribute_map = {\n      currentRound: 'current_round',\n      onlineMoney: 'online-money',\n      totalMoney: 'total-money'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['current_round'] === 'undefined') throw new Error(`Response is missing required field 'current_round': ${data}`);\n    if (typeof data['online-money'] === 'undefined') throw new Error(`Response is missing required field 'online-money': ${data}`);\n    if (typeof data['total-money'] === 'undefined') throw new Error(`Response is missing required field 'total-money': ${data}`);\n    return new SupplyResponse({\n      currentRound: data['current_round'],\n      onlineMoney: data['online-money'],\n      totalMoney: data['total-money']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Represents a key-value pair in an application store.\n */\nexport class TealKeyValue extends BaseModel {\n  /**\n   * Creates a new `TealKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value.\n   */\n  constructor(_ref40) {\n    let {\n      key,\n      value\n    } = _ref40;\n    super();\n    this.key = key;\n    this.value = value;\n    this.attribute_map = {\n      key: 'key',\n      value: 'value'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['key'] === 'undefined') throw new Error(`Response is missing required field 'key': ${data}`);\n    if (typeof data['value'] === 'undefined') throw new Error(`Response is missing required field 'value': ${data}`);\n    return new TealKeyValue({\n      key: data['key'],\n      value: TealValue.from_obj_for_encoding(data['value'])\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Represents a TEAL value.\n */\nexport class TealValue extends BaseModel {\n  /**\n   * Creates a new `TealValue` object.\n   * @param type - (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\n   * @param bytes - (tb) bytes value.\n   * @param uint - (ui) uint value.\n   */\n  constructor(_ref41) {\n    let {\n      type,\n      bytes,\n      uint\n    } = _ref41;\n    super();\n    this.type = type;\n    this.bytes = bytes;\n    this.uint = uint;\n    this.attribute_map = {\n      type: 'type',\n      bytes: 'bytes',\n      uint: 'uint'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['type'] === 'undefined') throw new Error(`Response is missing required field 'type': ${data}`);\n    if (typeof data['bytes'] === 'undefined') throw new Error(`Response is missing required field 'bytes': ${data}`);\n    if (typeof data['uint'] === 'undefined') throw new Error(`Response is missing required field 'uint': ${data}`);\n    return new TealValue({\n      type: data['type'],\n      bytes: data['bytes'],\n      uint: data['uint']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * TransactionParams contains the parameters that help a client construct a new\n * transaction.\n */\nexport class TransactionParametersResponse extends BaseModel {\n  /**\n   * Creates a new `TransactionParametersResponse` object.\n   * @param consensusVersion - ConsensusVersion indicates the consensus protocol version\n   * as of LastRound.\n   * @param fee - Fee is the suggested transaction fee\n   * Fee is in units of micro-Algos per byte.\n   * Fee may fall to zero but transactions must still have a fee of\n   * at least MinTxnFee for the current network protocol.\n   * @param genesisHash - GenesisHash is the hash of the genesis block.\n   * @param genesisId - GenesisID is an ID listed in the genesis block.\n   * @param lastRound - LastRound indicates the last round seen\n   * @param minFee - The minimum transaction fee (not per byte) required for the\n   * txn to validate for the current network protocol.\n   */\n  constructor(_ref42) {\n    let {\n      consensusVersion,\n      fee,\n      genesisHash,\n      genesisId,\n      lastRound,\n      minFee\n    } = _ref42;\n    super();\n    this.consensusVersion = consensusVersion;\n    this.fee = fee;\n    this.genesisHash = typeof genesisHash === 'string' ? new Uint8Array(Buffer.from(genesisHash, 'base64')) : genesisHash;\n    this.genesisId = genesisId;\n    this.lastRound = lastRound;\n    this.minFee = minFee;\n    this.attribute_map = {\n      consensusVersion: 'consensus-version',\n      fee: 'fee',\n      genesisHash: 'genesis-hash',\n      genesisId: 'genesis-id',\n      lastRound: 'last-round',\n      minFee: 'min-fee'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['consensus-version'] === 'undefined') throw new Error(`Response is missing required field 'consensus-version': ${data}`);\n    if (typeof data['fee'] === 'undefined') throw new Error(`Response is missing required field 'fee': ${data}`);\n    if (typeof data['genesis-hash'] === 'undefined') throw new Error(`Response is missing required field 'genesis-hash': ${data}`);\n    if (typeof data['genesis-id'] === 'undefined') throw new Error(`Response is missing required field 'genesis-id': ${data}`);\n    if (typeof data['last-round'] === 'undefined') throw new Error(`Response is missing required field 'last-round': ${data}`);\n    if (typeof data['min-fee'] === 'undefined') throw new Error(`Response is missing required field 'min-fee': ${data}`);\n    return new TransactionParametersResponse({\n      consensusVersion: data['consensus-version'],\n      fee: data['fee'],\n      genesisHash: data['genesis-hash'],\n      genesisId: data['genesis-id'],\n      lastRound: data['last-round'],\n      minFee: data['min-fee']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * Proof of transaction in a block.\n */\nexport class TransactionProofResponse extends BaseModel {\n  /**\n   * Creates a new `TransactionProofResponse` object.\n   * @param idx - Index of the transaction in the block's payset.\n   * @param proof - Proof of transaction membership.\n   * @param stibhash - Hash of SignedTxnInBlock for verifying proof.\n   * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\n   * from a leaf to the root.\n   * @param hashtype - The type of hash function used to create the proof, must be one of:\n   * * sha512_256\n   * * sha256\n   */\n  constructor(_ref43) {\n    let {\n      idx,\n      proof,\n      stibhash,\n      treedepth,\n      hashtype\n    } = _ref43;\n    super();\n    this.idx = idx;\n    this.proof = typeof proof === 'string' ? new Uint8Array(Buffer.from(proof, 'base64')) : proof;\n    this.stibhash = typeof stibhash === 'string' ? new Uint8Array(Buffer.from(stibhash, 'base64')) : stibhash;\n    this.treedepth = treedepth;\n    this.hashtype = hashtype;\n    this.attribute_map = {\n      idx: 'idx',\n      proof: 'proof',\n      stibhash: 'stibhash',\n      treedepth: 'treedepth',\n      hashtype: 'hashtype'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['idx'] === 'undefined') throw new Error(`Response is missing required field 'idx': ${data}`);\n    if (typeof data['proof'] === 'undefined') throw new Error(`Response is missing required field 'proof': ${data}`);\n    if (typeof data['stibhash'] === 'undefined') throw new Error(`Response is missing required field 'stibhash': ${data}`);\n    if (typeof data['treedepth'] === 'undefined') throw new Error(`Response is missing required field 'treedepth': ${data}`);\n    return new TransactionProofResponse({\n      idx: data['idx'],\n      proof: data['proof'],\n      stibhash: data['stibhash'],\n      treedepth: data['treedepth'],\n      hashtype: data['hashtype']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\n * algod version information.\n */\nexport class Version extends BaseModel {\n  /**\n   * Creates a new `Version` object.\n   * @param build -\n   * @param genesisHashB64 -\n   * @param genesisId -\n   * @param versions -\n   */\n  constructor(_ref44) {\n    let {\n      build,\n      genesisHashB64,\n      genesisId,\n      versions\n    } = _ref44;\n    super();\n    this.build = build;\n    this.genesisHashB64 = typeof genesisHashB64 === 'string' ? new Uint8Array(Buffer.from(genesisHashB64, 'base64')) : genesisHashB64;\n    this.genesisId = genesisId;\n    this.versions = versions;\n    this.attribute_map = {\n      build: 'build',\n      genesisHashB64: 'genesis_hash_b64',\n      genesisId: 'genesis_id',\n      versions: 'versions'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['build'] === 'undefined') throw new Error(`Response is missing required field 'build': ${data}`);\n    if (typeof data['genesis_hash_b64'] === 'undefined') throw new Error(`Response is missing required field 'genesis_hash_b64': ${data}`);\n    if (typeof data['genesis_id'] === 'undefined') throw new Error(`Response is missing required field 'genesis_id': ${data}`);\n    if (!Array.isArray(data['versions'])) throw new Error(`Response is missing required array field 'versions': ${data}`);\n    return new Version({\n      build: BuildVersion.from_obj_for_encoding(data['build']),\n      genesisHashB64: data['genesis_hash_b64'],\n      genesisId: data['genesis_id'],\n      versions: data['versions']\n    });\n    /* eslint-enable dot-notation */\n  }\n}","map":{"version":3,"names":["Buffer","BaseModel","Account","constructor","_ref","address","amount","amountWithoutPendingRewards","minBalance","pendingRewards","rewards","round","status","totalAppsOptedIn","totalAssetsOptedIn","totalCreatedApps","totalCreatedAssets","appsLocalState","appsTotalExtraPages","appsTotalSchema","assets","authAddr","createdApps","createdAssets","participation","rewardBase","sigType","totalBoxBytes","totalBoxes","attribute_map","from_obj_for_encoding","data","Error","map","ApplicationLocalState","undefined","ApplicationStateSchema","AssetHolding","Application","Asset","AccountParticipation","AccountApplicationResponse","_ref2","appLocalState","createdApp","ApplicationParams","AccountAssetResponse","_ref3","assetHolding","createdAsset","AssetParams","_ref4","selectionParticipationKey","voteFirstValid","voteKeyDilution","voteLastValid","voteParticipationKey","stateProofKey","Uint8Array","from","AccountStateDelta","_ref5","delta","Array","isArray","EvalDeltaKeyValue","_ref6","id","params","_ref7","schema","keyValue","TealKeyValue","_ref8","approvalProgram","clearStateProgram","creator","extraProgramPages","globalState","globalStateSchema","localStateSchema","_ref9","numUint","numByteSlice","_ref10","index","_ref11","assetId","isFrozen","_ref12","decimals","total","clawback","defaultFrozen","freeze","manager","metadataHash","name","nameB64","reserve","unitName","unitNameB64","url","urlB64","BlockHashResponse","_ref13","blockhash","BlockResponse","_ref14","block","cert","Box","_ref15","value","BoxDescriptor","_ref16","BoxesResponse","_ref17","boxes","BuildVersion","_ref18","branch","buildNumber","channel","commitHash","major","minor","CompileResponse","_ref19","hash","result","sourcemap","DisassembleResponse","_ref20","DryrunRequest","_ref21","accounts","apps","latestTimestamp","protocolVersion","sources","txns","DryrunSource","DryrunResponse","_ref22","error","DryrunTxnResult","_ref23","fieldName","source","txnIndex","appIndex","DryrunState","_ref24","line","pc","stack","scratch","TealValue","_ref25","disassembly","appCallMessages","appCallTrace","budgetAdded","budgetConsumed","globalDelta","localDeltas","logicSigDisassembly","logicSigMessages","logicSigTrace","logs","ErrorResponse","_ref26","message","EvalDelta","_ref27","action","bytes","uint","_ref28","key","LightBlockHeaderProof","_ref29","proof","treedepth","NodeStatusResponse","_ref30","catchupTime","lastRound","lastVersion","nextVersion","nextVersionRound","nextVersionSupported","stoppedAtUnsupportedRound","timeSinceLastRound","catchpoint","catchpointAcquiredBlocks","catchpointProcessedAccounts","catchpointProcessedKvs","catchpointTotalAccounts","catchpointTotalBlocks","catchpointTotalKvs","catchpointVerifiedAccounts","catchpointVerifiedKvs","lastCatchpoint","PendingTransactionResponse","_ref31","poolError","txn","applicationIndex","assetClosingAmount","assetIndex","closeRewards","closingAmount","confirmedRound","globalStateDelta","innerTxns","localStateDelta","receiverRewards","senderRewards","PendingTransactionsResponse","_ref32","topTransactions","totalTransactions","PostTransactionsResponse","_ref33","txid","SimulateResponse","_ref34","txnGroups","version","wouldSucceed","SimulateTransactionGroupResult","_ref35","txnResults","failedAt","failureMessage","SimulateTransactionResult","_ref36","txnResult","missingSignature","StateProof","_ref37","stateproof","StateProofMessage","_ref38","blockheaderscommitment","firstattestedround","lastattestedround","lnprovenweight","voterscommitment","SupplyResponse","_ref39","currentRound","onlineMoney","totalMoney","_ref40","_ref41","type","TransactionParametersResponse","_ref42","consensusVersion","fee","genesisHash","genesisId","minFee","TransactionProofResponse","_ref43","idx","stibhash","hashtype","Version","_ref44","build","genesisHashB64","versions"],"sources":["/home/danica/morra/frontend/node_modules/algosdk/src/client/v2/algod/models/types.ts"],"sourcesContent":["/**\n * NOTICE: This file was generated. Editing this file manually is not recommended.\n */\n\n/* eslint-disable no-use-before-define */\nimport { Buffer } from 'buffer';\nimport BaseModel from '../../basemodel';\nimport { EncodedSignedTransaction } from '../../../../types/transactions/encoded';\nimport BlockHeader from '../../../../types/blockHeader';\n\n/**\n * Account information at a given round.\n * Definition:\n * data/basics/userBalance.go : AccountData\n */\nexport class Account extends BaseModel {\n  /**\n   * the account public key\n   */\n  public address: string;\n\n  /**\n   * (algo) total number of MicroAlgos in the account\n   */\n  public amount: number | bigint;\n\n  /**\n   * specifies the amount of MicroAlgos in the account, without the pending rewards.\n   */\n  public amountWithoutPendingRewards: number | bigint;\n\n  /**\n   * MicroAlgo balance required by the account.\n   * The requirement grows based on asset and application usage.\n   */\n  public minBalance: number | bigint;\n\n  /**\n   * amount of MicroAlgos of pending rewards in this account.\n   */\n  public pendingRewards: number | bigint;\n\n  /**\n   * (ern) total rewards of MicroAlgos the account has received, including pending\n   * rewards.\n   */\n  public rewards: number | bigint;\n\n  /**\n   * The round for which this information is relevant.\n   */\n  public round: number | bigint;\n\n  /**\n   * (onl) delegation status of the account's MicroAlgos\n   * * Offline - indicates that the associated account is delegated.\n   * * Online - indicates that the associated account used as part of the delegation\n   * pool.\n   * * NotParticipating - indicates that the associated account is neither a\n   * delegator nor a delegate.\n   */\n  public status: string;\n\n  /**\n   * The count of all applications that have been opted in, equivalent to the count\n   * of application local data (AppLocalState objects) stored in this account.\n   */\n  public totalAppsOptedIn: number | bigint;\n\n  /**\n   * The count of all assets that have been opted in, equivalent to the count of\n   * AssetHolding objects held by this account.\n   */\n  public totalAssetsOptedIn: number | bigint;\n\n  /**\n   * The count of all apps (AppParams objects) created by this account.\n   */\n  public totalCreatedApps: number | bigint;\n\n  /**\n   * The count of all assets (AssetParams objects) created by this account.\n   */\n  public totalCreatedAssets: number | bigint;\n\n  /**\n   * (appl) applications local data stored in this account.\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\n   */\n  public appsLocalState?: ApplicationLocalState[];\n\n  /**\n   * (teap) the sum of all extra application program pages for this account.\n   */\n  public appsTotalExtraPages?: number | bigint;\n\n  /**\n   * (tsch) stores the sum of all of the local schemas and global schemas in this\n   * account.\n   * Note: the raw account uses `StateSchema` for this type.\n   */\n  public appsTotalSchema?: ApplicationStateSchema;\n\n  /**\n   * (asset) assets held by this account.\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\n   */\n  public assets?: AssetHolding[];\n\n  /**\n   * (spend) the address against which signing should be checked. If empty, the\n   * address of the current account is used. This field can be updated in any\n   * transaction by setting the RekeyTo field.\n   */\n  public authAddr?: string;\n\n  /**\n   * (appp) parameters of applications created by this account including app global\n   * data.\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\n   */\n  public createdApps?: Application[];\n\n  /**\n   * (apar) parameters of assets created by this account.\n   * Note: the raw account uses `map[int] -> Asset` for this type.\n   */\n  public createdAssets?: Asset[];\n\n  /**\n   * AccountParticipation describes the parameters used by this account in consensus\n   * protocol.\n   */\n  public participation?: AccountParticipation;\n\n  /**\n   * (ebase) used as part of the rewards computation. Only applicable to accounts\n   * which are participating.\n   */\n  public rewardBase?: number | bigint;\n\n  /**\n   * Indicates what type of signature is used by this account, must be one of:\n   * * sig\n   * * msig\n   * * lsig\n   */\n  public sigType?: string;\n\n  /**\n   * (tbxb) The total number of bytes used by this account's app's box keys and\n   * values.\n   */\n  public totalBoxBytes?: number | bigint;\n\n  /**\n   * (tbx) The number of existing boxes created by this account's app.\n   */\n  public totalBoxes?: number | bigint;\n\n  /**\n   * Creates a new `Account` object.\n   * @param address - the account public key\n   * @param amount - (algo) total number of MicroAlgos in the account\n   * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\n   * @param minBalance - MicroAlgo balance required by the account.\n   * The requirement grows based on asset and application usage.\n   * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\n   * @param rewards - (ern) total rewards of MicroAlgos the account has received, including pending\n   * rewards.\n   * @param round - The round for which this information is relevant.\n   * @param status - (onl) delegation status of the account's MicroAlgos\n   * * Offline - indicates that the associated account is delegated.\n   * * Online - indicates that the associated account used as part of the delegation\n   * pool.\n   * * NotParticipating - indicates that the associated account is neither a\n   * delegator nor a delegate.\n   * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\n   * of application local data (AppLocalState objects) stored in this account.\n   * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\n   * AssetHolding objects held by this account.\n   * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\n   * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\n   * @param appsLocalState - (appl) applications local data stored in this account.\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\n   * @param appsTotalExtraPages - (teap) the sum of all extra application program pages for this account.\n   * @param appsTotalSchema - (tsch) stores the sum of all of the local schemas and global schemas in this\n   * account.\n   * Note: the raw account uses `StateSchema` for this type.\n   * @param assets - (asset) assets held by this account.\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\n   * @param authAddr - (spend) the address against which signing should be checked. If empty, the\n   * address of the current account is used. This field can be updated in any\n   * transaction by setting the RekeyTo field.\n   * @param createdApps - (appp) parameters of applications created by this account including app global\n   * data.\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\n   * @param createdAssets - (apar) parameters of assets created by this account.\n   * Note: the raw account uses `map[int] -> Asset` for this type.\n   * @param participation - AccountParticipation describes the parameters used by this account in consensus\n   * protocol.\n   * @param rewardBase - (ebase) used as part of the rewards computation. Only applicable to accounts\n   * which are participating.\n   * @param sigType - Indicates what type of signature is used by this account, must be one of:\n   * * sig\n   * * msig\n   * * lsig\n   * @param totalBoxBytes - (tbxb) The total number of bytes used by this account's app's box keys and\n   * values.\n   * @param totalBoxes - (tbx) The number of existing boxes created by this account's app.\n   */\n  constructor({\n    address,\n    amount,\n    amountWithoutPendingRewards,\n    minBalance,\n    pendingRewards,\n    rewards,\n    round,\n    status,\n    totalAppsOptedIn,\n    totalAssetsOptedIn,\n    totalCreatedApps,\n    totalCreatedAssets,\n    appsLocalState,\n    appsTotalExtraPages,\n    appsTotalSchema,\n    assets,\n    authAddr,\n    createdApps,\n    createdAssets,\n    participation,\n    rewardBase,\n    sigType,\n    totalBoxBytes,\n    totalBoxes,\n  }: {\n    address: string;\n    amount: number | bigint;\n    amountWithoutPendingRewards: number | bigint;\n    minBalance: number | bigint;\n    pendingRewards: number | bigint;\n    rewards: number | bigint;\n    round: number | bigint;\n    status: string;\n    totalAppsOptedIn: number | bigint;\n    totalAssetsOptedIn: number | bigint;\n    totalCreatedApps: number | bigint;\n    totalCreatedAssets: number | bigint;\n    appsLocalState?: ApplicationLocalState[];\n    appsTotalExtraPages?: number | bigint;\n    appsTotalSchema?: ApplicationStateSchema;\n    assets?: AssetHolding[];\n    authAddr?: string;\n    createdApps?: Application[];\n    createdAssets?: Asset[];\n    participation?: AccountParticipation;\n    rewardBase?: number | bigint;\n    sigType?: string;\n    totalBoxBytes?: number | bigint;\n    totalBoxes?: number | bigint;\n  }) {\n    super();\n    this.address = address;\n    this.amount = amount;\n    this.amountWithoutPendingRewards = amountWithoutPendingRewards;\n    this.minBalance = minBalance;\n    this.pendingRewards = pendingRewards;\n    this.rewards = rewards;\n    this.round = round;\n    this.status = status;\n    this.totalAppsOptedIn = totalAppsOptedIn;\n    this.totalAssetsOptedIn = totalAssetsOptedIn;\n    this.totalCreatedApps = totalCreatedApps;\n    this.totalCreatedAssets = totalCreatedAssets;\n    this.appsLocalState = appsLocalState;\n    this.appsTotalExtraPages = appsTotalExtraPages;\n    this.appsTotalSchema = appsTotalSchema;\n    this.assets = assets;\n    this.authAddr = authAddr;\n    this.createdApps = createdApps;\n    this.createdAssets = createdAssets;\n    this.participation = participation;\n    this.rewardBase = rewardBase;\n    this.sigType = sigType;\n    this.totalBoxBytes = totalBoxBytes;\n    this.totalBoxes = totalBoxes;\n\n    this.attribute_map = {\n      address: 'address',\n      amount: 'amount',\n      amountWithoutPendingRewards: 'amount-without-pending-rewards',\n      minBalance: 'min-balance',\n      pendingRewards: 'pending-rewards',\n      rewards: 'rewards',\n      round: 'round',\n      status: 'status',\n      totalAppsOptedIn: 'total-apps-opted-in',\n      totalAssetsOptedIn: 'total-assets-opted-in',\n      totalCreatedApps: 'total-created-apps',\n      totalCreatedAssets: 'total-created-assets',\n      appsLocalState: 'apps-local-state',\n      appsTotalExtraPages: 'apps-total-extra-pages',\n      appsTotalSchema: 'apps-total-schema',\n      assets: 'assets',\n      authAddr: 'auth-addr',\n      createdApps: 'created-apps',\n      createdAssets: 'created-assets',\n      participation: 'participation',\n      rewardBase: 'reward-base',\n      sigType: 'sig-type',\n      totalBoxBytes: 'total-box-bytes',\n      totalBoxes: 'total-boxes',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): Account {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined')\n      throw new Error(`Response is missing required field 'address': ${data}`);\n    if (typeof data['amount'] === 'undefined')\n      throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['amount-without-pending-rewards'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'amount-without-pending-rewards': ${data}`\n      );\n    if (typeof data['min-balance'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'min-balance': ${data}`\n      );\n    if (typeof data['pending-rewards'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'pending-rewards': ${data}`\n      );\n    if (typeof data['rewards'] === 'undefined')\n      throw new Error(`Response is missing required field 'rewards': ${data}`);\n    if (typeof data['round'] === 'undefined')\n      throw new Error(`Response is missing required field 'round': ${data}`);\n    if (typeof data['status'] === 'undefined')\n      throw new Error(`Response is missing required field 'status': ${data}`);\n    if (typeof data['total-apps-opted-in'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-apps-opted-in': ${data}`\n      );\n    if (typeof data['total-assets-opted-in'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-assets-opted-in': ${data}`\n      );\n    if (typeof data['total-created-apps'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-created-apps': ${data}`\n      );\n    if (typeof data['total-created-assets'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-created-assets': ${data}`\n      );\n    return new Account({\n      address: data['address'],\n      amount: data['amount'],\n      amountWithoutPendingRewards: data['amount-without-pending-rewards'],\n      minBalance: data['min-balance'],\n      pendingRewards: data['pending-rewards'],\n      rewards: data['rewards'],\n      round: data['round'],\n      status: data['status'],\n      totalAppsOptedIn: data['total-apps-opted-in'],\n      totalAssetsOptedIn: data['total-assets-opted-in'],\n      totalCreatedApps: data['total-created-apps'],\n      totalCreatedAssets: data['total-created-assets'],\n      appsLocalState:\n        typeof data['apps-local-state'] !== 'undefined'\n          ? data['apps-local-state'].map(\n              ApplicationLocalState.from_obj_for_encoding\n            )\n          : undefined,\n      appsTotalExtraPages: data['apps-total-extra-pages'],\n      appsTotalSchema:\n        typeof data['apps-total-schema'] !== 'undefined'\n          ? ApplicationStateSchema.from_obj_for_encoding(\n              data['apps-total-schema']\n            )\n          : undefined,\n      assets:\n        typeof data['assets'] !== 'undefined'\n          ? data['assets'].map(AssetHolding.from_obj_for_encoding)\n          : undefined,\n      authAddr: data['auth-addr'],\n      createdApps:\n        typeof data['created-apps'] !== 'undefined'\n          ? data['created-apps'].map(Application.from_obj_for_encoding)\n          : undefined,\n      createdAssets:\n        typeof data['created-assets'] !== 'undefined'\n          ? data['created-assets'].map(Asset.from_obj_for_encoding)\n          : undefined,\n      participation:\n        typeof data['participation'] !== 'undefined'\n          ? AccountParticipation.from_obj_for_encoding(data['participation'])\n          : undefined,\n      rewardBase: data['reward-base'],\n      sigType: data['sig-type'],\n      totalBoxBytes: data['total-box-bytes'],\n      totalBoxes: data['total-boxes'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * AccountApplicationResponse describes the account's application local state and\n * global state (AppLocalState and AppParams, if either exists) for a specific\n * application ID. Global state will only be returned if the provided address is\n * the application's creator.\n */\nexport class AccountApplicationResponse extends BaseModel {\n  /**\n   * The round for which this information is relevant.\n   */\n  public round: number | bigint;\n\n  /**\n   * (appl) the application local data stored in this account.\n   * The raw account uses `AppLocalState` for this type.\n   */\n  public appLocalState?: ApplicationLocalState;\n\n  /**\n   * (appp) parameters of the application created by this account including app\n   * global data.\n   * The raw account uses `AppParams` for this type.\n   */\n  public createdApp?: ApplicationParams;\n\n  /**\n   * Creates a new `AccountApplicationResponse` object.\n   * @param round - The round for which this information is relevant.\n   * @param appLocalState - (appl) the application local data stored in this account.\n   * The raw account uses `AppLocalState` for this type.\n   * @param createdApp - (appp) parameters of the application created by this account including app\n   * global data.\n   * The raw account uses `AppParams` for this type.\n   */\n  constructor({\n    round,\n    appLocalState,\n    createdApp,\n  }: {\n    round: number | bigint;\n    appLocalState?: ApplicationLocalState;\n    createdApp?: ApplicationParams;\n  }) {\n    super();\n    this.round = round;\n    this.appLocalState = appLocalState;\n    this.createdApp = createdApp;\n\n    this.attribute_map = {\n      round: 'round',\n      appLocalState: 'app-local-state',\n      createdApp: 'created-app',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): AccountApplicationResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['round'] === 'undefined')\n      throw new Error(`Response is missing required field 'round': ${data}`);\n    return new AccountApplicationResponse({\n      round: data['round'],\n      appLocalState:\n        typeof data['app-local-state'] !== 'undefined'\n          ? ApplicationLocalState.from_obj_for_encoding(data['app-local-state'])\n          : undefined,\n      createdApp:\n        typeof data['created-app'] !== 'undefined'\n          ? ApplicationParams.from_obj_for_encoding(data['created-app'])\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * AccountAssetResponse describes the account's asset holding and asset parameters\n * (if either exist) for a specific asset ID. Asset parameters will only be\n * returned if the provided address is the asset's creator.\n */\nexport class AccountAssetResponse extends BaseModel {\n  /**\n   * The round for which this information is relevant.\n   */\n  public round: number | bigint;\n\n  /**\n   * (asset) Details about the asset held by this account.\n   * The raw account uses `AssetHolding` for this type.\n   */\n  public assetHolding?: AssetHolding;\n\n  /**\n   * (apar) parameters of the asset created by this account.\n   * The raw account uses `AssetParams` for this type.\n   */\n  public createdAsset?: AssetParams;\n\n  /**\n   * Creates a new `AccountAssetResponse` object.\n   * @param round - The round for which this information is relevant.\n   * @param assetHolding - (asset) Details about the asset held by this account.\n   * The raw account uses `AssetHolding` for this type.\n   * @param createdAsset - (apar) parameters of the asset created by this account.\n   * The raw account uses `AssetParams` for this type.\n   */\n  constructor({\n    round,\n    assetHolding,\n    createdAsset,\n  }: {\n    round: number | bigint;\n    assetHolding?: AssetHolding;\n    createdAsset?: AssetParams;\n  }) {\n    super();\n    this.round = round;\n    this.assetHolding = assetHolding;\n    this.createdAsset = createdAsset;\n\n    this.attribute_map = {\n      round: 'round',\n      assetHolding: 'asset-holding',\n      createdAsset: 'created-asset',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): AccountAssetResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['round'] === 'undefined')\n      throw new Error(`Response is missing required field 'round': ${data}`);\n    return new AccountAssetResponse({\n      round: data['round'],\n      assetHolding:\n        typeof data['asset-holding'] !== 'undefined'\n          ? AssetHolding.from_obj_for_encoding(data['asset-holding'])\n          : undefined,\n      createdAsset:\n        typeof data['created-asset'] !== 'undefined'\n          ? AssetParams.from_obj_for_encoding(data['created-asset'])\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * AccountParticipation describes the parameters used by this account in consensus\n * protocol.\n */\nexport class AccountParticipation extends BaseModel {\n  /**\n   * (sel) Selection public key (if any) currently registered for this round.\n   */\n  public selectionParticipationKey: Uint8Array;\n\n  /**\n   * (voteFst) First round for which this participation is valid.\n   */\n  public voteFirstValid: number | bigint;\n\n  /**\n   * (voteKD) Number of subkeys in each batch of participation keys.\n   */\n  public voteKeyDilution: number | bigint;\n\n  /**\n   * (voteLst) Last round for which this participation is valid.\n   */\n  public voteLastValid: number | bigint;\n\n  /**\n   * (vote) root participation public key (if any) currently registered for this\n   * round.\n   */\n  public voteParticipationKey: Uint8Array;\n\n  /**\n   * (stprf) Root of the state proof key (if any)\n   */\n  public stateProofKey?: Uint8Array;\n\n  /**\n   * Creates a new `AccountParticipation` object.\n   * @param selectionParticipationKey - (sel) Selection public key (if any) currently registered for this round.\n   * @param voteFirstValid - (voteFst) First round for which this participation is valid.\n   * @param voteKeyDilution - (voteKD) Number of subkeys in each batch of participation keys.\n   * @param voteLastValid - (voteLst) Last round for which this participation is valid.\n   * @param voteParticipationKey - (vote) root participation public key (if any) currently registered for this\n   * round.\n   * @param stateProofKey - (stprf) Root of the state proof key (if any)\n   */\n  constructor({\n    selectionParticipationKey,\n    voteFirstValid,\n    voteKeyDilution,\n    voteLastValid,\n    voteParticipationKey,\n    stateProofKey,\n  }: {\n    selectionParticipationKey: string | Uint8Array;\n    voteFirstValid: number | bigint;\n    voteKeyDilution: number | bigint;\n    voteLastValid: number | bigint;\n    voteParticipationKey: string | Uint8Array;\n    stateProofKey?: string | Uint8Array;\n  }) {\n    super();\n    this.selectionParticipationKey =\n      typeof selectionParticipationKey === 'string'\n        ? new Uint8Array(Buffer.from(selectionParticipationKey, 'base64'))\n        : selectionParticipationKey;\n    this.voteFirstValid = voteFirstValid;\n    this.voteKeyDilution = voteKeyDilution;\n    this.voteLastValid = voteLastValid;\n    this.voteParticipationKey =\n      typeof voteParticipationKey === 'string'\n        ? new Uint8Array(Buffer.from(voteParticipationKey, 'base64'))\n        : voteParticipationKey;\n    this.stateProofKey =\n      typeof stateProofKey === 'string'\n        ? new Uint8Array(Buffer.from(stateProofKey, 'base64'))\n        : stateProofKey;\n\n    this.attribute_map = {\n      selectionParticipationKey: 'selection-participation-key',\n      voteFirstValid: 'vote-first-valid',\n      voteKeyDilution: 'vote-key-dilution',\n      voteLastValid: 'vote-last-valid',\n      voteParticipationKey: 'vote-participation-key',\n      stateProofKey: 'state-proof-key',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): AccountParticipation {\n    /* eslint-disable dot-notation */\n    if (typeof data['selection-participation-key'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'selection-participation-key': ${data}`\n      );\n    if (typeof data['vote-first-valid'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'vote-first-valid': ${data}`\n      );\n    if (typeof data['vote-key-dilution'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'vote-key-dilution': ${data}`\n      );\n    if (typeof data['vote-last-valid'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'vote-last-valid': ${data}`\n      );\n    if (typeof data['vote-participation-key'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'vote-participation-key': ${data}`\n      );\n    return new AccountParticipation({\n      selectionParticipationKey: data['selection-participation-key'],\n      voteFirstValid: data['vote-first-valid'],\n      voteKeyDilution: data['vote-key-dilution'],\n      voteLastValid: data['vote-last-valid'],\n      voteParticipationKey: data['vote-participation-key'],\n      stateProofKey: data['state-proof-key'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Application state delta.\n */\nexport class AccountStateDelta extends BaseModel {\n  public address: string;\n\n  /**\n   * Application state delta.\n   */\n  public delta: EvalDeltaKeyValue[];\n\n  /**\n   * Creates a new `AccountStateDelta` object.\n   * @param address -\n   * @param delta - Application state delta.\n   */\n  constructor({\n    address,\n    delta,\n  }: {\n    address: string;\n    delta: EvalDeltaKeyValue[];\n  }) {\n    super();\n    this.address = address;\n    this.delta = delta;\n\n    this.attribute_map = {\n      address: 'address',\n      delta: 'delta',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): AccountStateDelta {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined')\n      throw new Error(`Response is missing required field 'address': ${data}`);\n    if (!Array.isArray(data['delta']))\n      throw new Error(\n        `Response is missing required array field 'delta': ${data}`\n      );\n    return new AccountStateDelta({\n      address: data['address'],\n      delta: data['delta'].map(EvalDeltaKeyValue.from_obj_for_encoding),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Application index and its parameters\n */\nexport class Application extends BaseModel {\n  /**\n   * (appidx) application index.\n   */\n  public id: number | bigint;\n\n  /**\n   * (appparams) application parameters.\n   */\n  public params: ApplicationParams;\n\n  /**\n   * Creates a new `Application` object.\n   * @param id - (appidx) application index.\n   * @param params - (appparams) application parameters.\n   */\n  constructor({\n    id,\n    params,\n  }: {\n    id: number | bigint;\n    params: ApplicationParams;\n  }) {\n    super();\n    this.id = id;\n    this.params = params;\n\n    this.attribute_map = {\n      id: 'id',\n      params: 'params',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): Application {\n    /* eslint-disable dot-notation */\n    if (typeof data['id'] === 'undefined')\n      throw new Error(`Response is missing required field 'id': ${data}`);\n    if (typeof data['params'] === 'undefined')\n      throw new Error(`Response is missing required field 'params': ${data}`);\n    return new Application({\n      id: data['id'],\n      params: ApplicationParams.from_obj_for_encoding(data['params']),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Stores local state associated with an application.\n */\nexport class ApplicationLocalState extends BaseModel {\n  /**\n   * The application which this local state is for.\n   */\n  public id: number | bigint;\n\n  /**\n   * (hsch) schema.\n   */\n  public schema: ApplicationStateSchema;\n\n  /**\n   * (tkv) storage.\n   */\n  public keyValue?: TealKeyValue[];\n\n  /**\n   * Creates a new `ApplicationLocalState` object.\n   * @param id - The application which this local state is for.\n   * @param schema - (hsch) schema.\n   * @param keyValue - (tkv) storage.\n   */\n  constructor({\n    id,\n    schema,\n    keyValue,\n  }: {\n    id: number | bigint;\n    schema: ApplicationStateSchema;\n    keyValue?: TealKeyValue[];\n  }) {\n    super();\n    this.id = id;\n    this.schema = schema;\n    this.keyValue = keyValue;\n\n    this.attribute_map = {\n      id: 'id',\n      schema: 'schema',\n      keyValue: 'key-value',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): ApplicationLocalState {\n    /* eslint-disable dot-notation */\n    if (typeof data['id'] === 'undefined')\n      throw new Error(`Response is missing required field 'id': ${data}`);\n    if (typeof data['schema'] === 'undefined')\n      throw new Error(`Response is missing required field 'schema': ${data}`);\n    return new ApplicationLocalState({\n      id: data['id'],\n      schema: ApplicationStateSchema.from_obj_for_encoding(data['schema']),\n      keyValue:\n        typeof data['key-value'] !== 'undefined'\n          ? data['key-value'].map(TealKeyValue.from_obj_for_encoding)\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Stores the global information associated with an application.\n */\nexport class ApplicationParams extends BaseModel {\n  /**\n   * (approv) approval program.\n   */\n  public approvalProgram: Uint8Array;\n\n  /**\n   * (clearp) approval program.\n   */\n  public clearStateProgram: Uint8Array;\n\n  /**\n   * The address that created this application. This is the address where the\n   * parameters and global state for this application can be found.\n   */\n  public creator: string;\n\n  /**\n   * (epp) the amount of extra program pages available to this app.\n   */\n  public extraProgramPages?: number | bigint;\n\n  /**\n   * [\\gs) global schema\n   */\n  public globalState?: TealKeyValue[];\n\n  /**\n   * [\\gsch) global schema\n   */\n  public globalStateSchema?: ApplicationStateSchema;\n\n  /**\n   * [\\lsch) local schema\n   */\n  public localStateSchema?: ApplicationStateSchema;\n\n  /**\n   * Creates a new `ApplicationParams` object.\n   * @param approvalProgram - (approv) approval program.\n   * @param clearStateProgram - (clearp) approval program.\n   * @param creator - The address that created this application. This is the address where the\n   * parameters and global state for this application can be found.\n   * @param extraProgramPages - (epp) the amount of extra program pages available to this app.\n   * @param globalState - [\\gs) global schema\n   * @param globalStateSchema - [\\gsch) global schema\n   * @param localStateSchema - [\\lsch) local schema\n   */\n  constructor({\n    approvalProgram,\n    clearStateProgram,\n    creator,\n    extraProgramPages,\n    globalState,\n    globalStateSchema,\n    localStateSchema,\n  }: {\n    approvalProgram: string | Uint8Array;\n    clearStateProgram: string | Uint8Array;\n    creator: string;\n    extraProgramPages?: number | bigint;\n    globalState?: TealKeyValue[];\n    globalStateSchema?: ApplicationStateSchema;\n    localStateSchema?: ApplicationStateSchema;\n  }) {\n    super();\n    this.approvalProgram =\n      typeof approvalProgram === 'string'\n        ? new Uint8Array(Buffer.from(approvalProgram, 'base64'))\n        : approvalProgram;\n    this.clearStateProgram =\n      typeof clearStateProgram === 'string'\n        ? new Uint8Array(Buffer.from(clearStateProgram, 'base64'))\n        : clearStateProgram;\n    this.creator = creator;\n    this.extraProgramPages = extraProgramPages;\n    this.globalState = globalState;\n    this.globalStateSchema = globalStateSchema;\n    this.localStateSchema = localStateSchema;\n\n    this.attribute_map = {\n      approvalProgram: 'approval-program',\n      clearStateProgram: 'clear-state-program',\n      creator: 'creator',\n      extraProgramPages: 'extra-program-pages',\n      globalState: 'global-state',\n      globalStateSchema: 'global-state-schema',\n      localStateSchema: 'local-state-schema',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): ApplicationParams {\n    /* eslint-disable dot-notation */\n    if (typeof data['approval-program'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'approval-program': ${data}`\n      );\n    if (typeof data['clear-state-program'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'clear-state-program': ${data}`\n      );\n    if (typeof data['creator'] === 'undefined')\n      throw new Error(`Response is missing required field 'creator': ${data}`);\n    return new ApplicationParams({\n      approvalProgram: data['approval-program'],\n      clearStateProgram: data['clear-state-program'],\n      creator: data['creator'],\n      extraProgramPages: data['extra-program-pages'],\n      globalState:\n        typeof data['global-state'] !== 'undefined'\n          ? data['global-state'].map(TealKeyValue.from_obj_for_encoding)\n          : undefined,\n      globalStateSchema:\n        typeof data['global-state-schema'] !== 'undefined'\n          ? ApplicationStateSchema.from_obj_for_encoding(\n              data['global-state-schema']\n            )\n          : undefined,\n      localStateSchema:\n        typeof data['local-state-schema'] !== 'undefined'\n          ? ApplicationStateSchema.from_obj_for_encoding(\n              data['local-state-schema']\n            )\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Specifies maximums on the number of each type that may be stored.\n */\nexport class ApplicationStateSchema extends BaseModel {\n  /**\n   * (nui) num of uints.\n   */\n  public numUint: number | bigint;\n\n  /**\n   * (nbs) num of byte slices.\n   */\n  public numByteSlice: number | bigint;\n\n  /**\n   * Creates a new `ApplicationStateSchema` object.\n   * @param numUint - (nui) num of uints.\n   * @param numByteSlice - (nbs) num of byte slices.\n   */\n  constructor({\n    numUint,\n    numByteSlice,\n  }: {\n    numUint: number | bigint;\n    numByteSlice: number | bigint;\n  }) {\n    super();\n    this.numUint = numUint;\n    this.numByteSlice = numByteSlice;\n\n    this.attribute_map = {\n      numUint: 'num-uint',\n      numByteSlice: 'num-byte-slice',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): ApplicationStateSchema {\n    /* eslint-disable dot-notation */\n    if (typeof data['num-uint'] === 'undefined')\n      throw new Error(`Response is missing required field 'num-uint': ${data}`);\n    if (typeof data['num-byte-slice'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'num-byte-slice': ${data}`\n      );\n    return new ApplicationStateSchema({\n      numUint: data['num-uint'],\n      numByteSlice: data['num-byte-slice'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Specifies both the unique identifier and the parameters for an asset\n */\nexport class Asset extends BaseModel {\n  /**\n   * unique asset identifier\n   */\n  public index: number | bigint;\n\n  /**\n   * AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   */\n  public params: AssetParams;\n\n  /**\n   * Creates a new `Asset` object.\n   * @param index - unique asset identifier\n   * @param params - AssetParams specifies the parameters for an asset.\n   * (apar) when part of an AssetConfig transaction.\n   * Definition:\n   * data/transactions/asset.go : AssetParams\n   */\n  constructor({\n    index,\n    params,\n  }: {\n    index: number | bigint;\n    params: AssetParams;\n  }) {\n    super();\n    this.index = index;\n    this.params = params;\n\n    this.attribute_map = {\n      index: 'index',\n      params: 'params',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): Asset {\n    /* eslint-disable dot-notation */\n    if (typeof data['index'] === 'undefined')\n      throw new Error(`Response is missing required field 'index': ${data}`);\n    if (typeof data['params'] === 'undefined')\n      throw new Error(`Response is missing required field 'params': ${data}`);\n    return new Asset({\n      index: data['index'],\n      params: AssetParams.from_obj_for_encoding(data['params']),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Describes an asset held by an account.\n * Definition:\n * data/basics/userBalance.go : AssetHolding\n */\nexport class AssetHolding extends BaseModel {\n  /**\n   * (a) number of units held.\n   */\n  public amount: number | bigint;\n\n  /**\n   * Asset ID of the holding.\n   */\n  public assetId: number | bigint;\n\n  /**\n   * (f) whether or not the holding is frozen.\n   */\n  public isFrozen: boolean;\n\n  /**\n   * Creates a new `AssetHolding` object.\n   * @param amount - (a) number of units held.\n   * @param assetId - Asset ID of the holding.\n   * @param isFrozen - (f) whether or not the holding is frozen.\n   */\n  constructor({\n    amount,\n    assetId,\n    isFrozen,\n  }: {\n    amount: number | bigint;\n    assetId: number | bigint;\n    isFrozen: boolean;\n  }) {\n    super();\n    this.amount = amount;\n    this.assetId = assetId;\n    this.isFrozen = isFrozen;\n\n    this.attribute_map = {\n      amount: 'amount',\n      assetId: 'asset-id',\n      isFrozen: 'is-frozen',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): AssetHolding {\n    /* eslint-disable dot-notation */\n    if (typeof data['amount'] === 'undefined')\n      throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['asset-id'] === 'undefined')\n      throw new Error(`Response is missing required field 'asset-id': ${data}`);\n    if (typeof data['is-frozen'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'is-frozen': ${data}`\n      );\n    return new AssetHolding({\n      amount: data['amount'],\n      assetId: data['asset-id'],\n      isFrozen: data['is-frozen'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * AssetParams specifies the parameters for an asset.\n * (apar) when part of an AssetConfig transaction.\n * Definition:\n * data/transactions/asset.go : AssetParams\n */\nexport class AssetParams extends BaseModel {\n  /**\n   * The address that created this asset. This is the address where the parameters\n   * for this asset can be found, and also the address where unwanted asset units can\n   * be sent in the worst case.\n   */\n  public creator: string;\n\n  /**\n   * (dc) The number of digits to use after the decimal point when displaying this\n   * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\n   * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\n   * must be between 0 and 19 (inclusive).\n   */\n  public decimals: number | bigint;\n\n  /**\n   * (t) The total number of units of this asset.\n   */\n  public total: number | bigint;\n\n  /**\n   * (c) Address of account used to clawback holdings of this asset. If empty,\n   * clawback is not permitted.\n   */\n  public clawback?: string;\n\n  /**\n   * (df) Whether holdings of this asset are frozen by default.\n   */\n  public defaultFrozen?: boolean;\n\n  /**\n   * (f) Address of account used to freeze holdings of this asset. If empty, freezing\n   * is not permitted.\n   */\n  public freeze?: string;\n\n  /**\n   * (m) Address of account used to manage the keys of this asset and to destroy it.\n   */\n  public manager?: string;\n\n  /**\n   * (am) A commitment to some unspecified asset metadata. The format of this\n   * metadata is up to the application.\n   */\n  public metadataHash?: Uint8Array;\n\n  /**\n   * (an) Name of this asset, as supplied by the creator. Included only when the\n   * asset name is composed of printable utf-8 characters.\n   */\n  public name?: string;\n\n  /**\n   * Base64 encoded name of this asset, as supplied by the creator.\n   */\n  public nameB64?: Uint8Array;\n\n  /**\n   * (r) Address of account holding reserve (non-minted) units of this asset.\n   */\n  public reserve?: string;\n\n  /**\n   * (un) Name of a unit of this asset, as supplied by the creator. Included only\n   * when the name of a unit of this asset is composed of printable utf-8 characters.\n   */\n  public unitName?: string;\n\n  /**\n   * Base64 encoded name of a unit of this asset, as supplied by the creator.\n   */\n  public unitNameB64?: Uint8Array;\n\n  /**\n   * (au) URL where more information about the asset can be retrieved. Included only\n   * when the URL is composed of printable utf-8 characters.\n   */\n  public url?: string;\n\n  /**\n   * Base64 encoded URL where more information about the asset can be retrieved.\n   */\n  public urlB64?: Uint8Array;\n\n  /**\n   * Creates a new `AssetParams` object.\n   * @param creator - The address that created this asset. This is the address where the parameters\n   * for this asset can be found, and also the address where unwanted asset units can\n   * be sent in the worst case.\n   * @param decimals - (dc) The number of digits to use after the decimal point when displaying this\n   * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\n   * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\n   * must be between 0 and 19 (inclusive).\n   * @param total - (t) The total number of units of this asset.\n   * @param clawback - (c) Address of account used to clawback holdings of this asset. If empty,\n   * clawback is not permitted.\n   * @param defaultFrozen - (df) Whether holdings of this asset are frozen by default.\n   * @param freeze - (f) Address of account used to freeze holdings of this asset. If empty, freezing\n   * is not permitted.\n   * @param manager - (m) Address of account used to manage the keys of this asset and to destroy it.\n   * @param metadataHash - (am) A commitment to some unspecified asset metadata. The format of this\n   * metadata is up to the application.\n   * @param name - (an) Name of this asset, as supplied by the creator. Included only when the\n   * asset name is composed of printable utf-8 characters.\n   * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\n   * @param reserve - (r) Address of account holding reserve (non-minted) units of this asset.\n   * @param unitName - (un) Name of a unit of this asset, as supplied by the creator. Included only\n   * when the name of a unit of this asset is composed of printable utf-8 characters.\n   * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\n   * @param url - (au) URL where more information about the asset can be retrieved. Included only\n   * when the URL is composed of printable utf-8 characters.\n   * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\n   */\n  constructor({\n    creator,\n    decimals,\n    total,\n    clawback,\n    defaultFrozen,\n    freeze,\n    manager,\n    metadataHash,\n    name,\n    nameB64,\n    reserve,\n    unitName,\n    unitNameB64,\n    url,\n    urlB64,\n  }: {\n    creator: string;\n    decimals: number | bigint;\n    total: number | bigint;\n    clawback?: string;\n    defaultFrozen?: boolean;\n    freeze?: string;\n    manager?: string;\n    metadataHash?: string | Uint8Array;\n    name?: string;\n    nameB64?: string | Uint8Array;\n    reserve?: string;\n    unitName?: string;\n    unitNameB64?: string | Uint8Array;\n    url?: string;\n    urlB64?: string | Uint8Array;\n  }) {\n    super();\n    this.creator = creator;\n    this.decimals = decimals;\n    this.total = total;\n    this.clawback = clawback;\n    this.defaultFrozen = defaultFrozen;\n    this.freeze = freeze;\n    this.manager = manager;\n    this.metadataHash =\n      typeof metadataHash === 'string'\n        ? new Uint8Array(Buffer.from(metadataHash, 'base64'))\n        : metadataHash;\n    this.name = name;\n    this.nameB64 =\n      typeof nameB64 === 'string'\n        ? new Uint8Array(Buffer.from(nameB64, 'base64'))\n        : nameB64;\n    this.reserve = reserve;\n    this.unitName = unitName;\n    this.unitNameB64 =\n      typeof unitNameB64 === 'string'\n        ? new Uint8Array(Buffer.from(unitNameB64, 'base64'))\n        : unitNameB64;\n    this.url = url;\n    this.urlB64 =\n      typeof urlB64 === 'string'\n        ? new Uint8Array(Buffer.from(urlB64, 'base64'))\n        : urlB64;\n\n    this.attribute_map = {\n      creator: 'creator',\n      decimals: 'decimals',\n      total: 'total',\n      clawback: 'clawback',\n      defaultFrozen: 'default-frozen',\n      freeze: 'freeze',\n      manager: 'manager',\n      metadataHash: 'metadata-hash',\n      name: 'name',\n      nameB64: 'name-b64',\n      reserve: 'reserve',\n      unitName: 'unit-name',\n      unitNameB64: 'unit-name-b64',\n      url: 'url',\n      urlB64: 'url-b64',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): AssetParams {\n    /* eslint-disable dot-notation */\n    if (typeof data['creator'] === 'undefined')\n      throw new Error(`Response is missing required field 'creator': ${data}`);\n    if (typeof data['decimals'] === 'undefined')\n      throw new Error(`Response is missing required field 'decimals': ${data}`);\n    if (typeof data['total'] === 'undefined')\n      throw new Error(`Response is missing required field 'total': ${data}`);\n    return new AssetParams({\n      creator: data['creator'],\n      decimals: data['decimals'],\n      total: data['total'],\n      clawback: data['clawback'],\n      defaultFrozen: data['default-frozen'],\n      freeze: data['freeze'],\n      manager: data['manager'],\n      metadataHash: data['metadata-hash'],\n      name: data['name'],\n      nameB64: data['name-b64'],\n      reserve: data['reserve'],\n      unitName: data['unit-name'],\n      unitNameB64: data['unit-name-b64'],\n      url: data['url'],\n      urlB64: data['url-b64'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Hash of a block header.\n */\nexport class BlockHashResponse extends BaseModel {\n  /**\n   * Block header hash.\n   */\n  public blockhash: string;\n\n  /**\n   * Creates a new `BlockHashResponse` object.\n   * @param blockhash - Block header hash.\n   */\n  constructor({ blockhash }: { blockhash: string }) {\n    super();\n    this.blockhash = blockhash;\n\n    this.attribute_map = {\n      blockhash: 'blockHash',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): BlockHashResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['blockHash'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'blockHash': ${data}`\n      );\n    return new BlockHashResponse({\n      blockhash: data['blockHash'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Encoded block object.\n */\nexport class BlockResponse extends BaseModel {\n  /**\n   * Block header data.\n   */\n  public block: BlockHeader;\n\n  /**\n   * Optional certificate object. This is only included when the format is set to\n   * message pack.\n   */\n  public cert?: Record<string, any>;\n\n  /**\n   * Creates a new `BlockResponse` object.\n   * @param block - Block header data.\n   * @param cert - Optional certificate object. This is only included when the format is set to\n   * message pack.\n   */\n  constructor({\n    block,\n    cert,\n  }: {\n    block: BlockHeader;\n    cert?: Record<string, any>;\n  }) {\n    super();\n    this.block = block;\n    this.cert = cert;\n\n    this.attribute_map = {\n      block: 'block',\n      cert: 'cert',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): BlockResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['block'] === 'undefined')\n      throw new Error(`Response is missing required field 'block': ${data}`);\n    return new BlockResponse({\n      block: data['block'],\n      cert: data['cert'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Box name and its content.\n */\nexport class Box extends BaseModel {\n  /**\n   * (name) box name, base64 encoded\n   */\n  public name: Uint8Array;\n\n  /**\n   * (value) box value, base64 encoded.\n   */\n  public value: Uint8Array;\n\n  /**\n   * Creates a new `Box` object.\n   * @param name - (name) box name, base64 encoded\n   * @param value - (value) box value, base64 encoded.\n   */\n  constructor({\n    name,\n    value,\n  }: {\n    name: string | Uint8Array;\n    value: string | Uint8Array;\n  }) {\n    super();\n    this.name =\n      typeof name === 'string'\n        ? new Uint8Array(Buffer.from(name, 'base64'))\n        : name;\n    this.value =\n      typeof value === 'string'\n        ? new Uint8Array(Buffer.from(value, 'base64'))\n        : value;\n\n    this.attribute_map = {\n      name: 'name',\n      value: 'value',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): Box {\n    /* eslint-disable dot-notation */\n    if (typeof data['name'] === 'undefined')\n      throw new Error(`Response is missing required field 'name': ${data}`);\n    if (typeof data['value'] === 'undefined')\n      throw new Error(`Response is missing required field 'value': ${data}`);\n    return new Box({\n      name: data['name'],\n      value: data['value'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Box descriptor describes a Box.\n */\nexport class BoxDescriptor extends BaseModel {\n  /**\n   * Base64 encoded box name\n   */\n  public name: Uint8Array;\n\n  /**\n   * Creates a new `BoxDescriptor` object.\n   * @param name - Base64 encoded box name\n   */\n  constructor({ name }: { name: string | Uint8Array }) {\n    super();\n    this.name =\n      typeof name === 'string'\n        ? new Uint8Array(Buffer.from(name, 'base64'))\n        : name;\n\n    this.attribute_map = {\n      name: 'name',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): BoxDescriptor {\n    /* eslint-disable dot-notation */\n    if (typeof data['name'] === 'undefined')\n      throw new Error(`Response is missing required field 'name': ${data}`);\n    return new BoxDescriptor({\n      name: data['name'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Box names of an application\n */\nexport class BoxesResponse extends BaseModel {\n  public boxes: BoxDescriptor[];\n\n  /**\n   * Creates a new `BoxesResponse` object.\n   * @param boxes -\n   */\n  constructor({ boxes }: { boxes: BoxDescriptor[] }) {\n    super();\n    this.boxes = boxes;\n\n    this.attribute_map = {\n      boxes: 'boxes',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): BoxesResponse {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['boxes']))\n      throw new Error(\n        `Response is missing required array field 'boxes': ${data}`\n      );\n    return new BoxesResponse({\n      boxes: data['boxes'].map(BoxDescriptor.from_obj_for_encoding),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\nexport class BuildVersion extends BaseModel {\n  public branch: string;\n\n  public buildNumber: number | bigint;\n\n  public channel: string;\n\n  public commitHash: string;\n\n  public major: number | bigint;\n\n  public minor: number | bigint;\n\n  /**\n   * Creates a new `BuildVersion` object.\n   * @param branch -\n   * @param buildNumber -\n   * @param channel -\n   * @param commitHash -\n   * @param major -\n   * @param minor -\n   */\n  constructor({\n    branch,\n    buildNumber,\n    channel,\n    commitHash,\n    major,\n    minor,\n  }: {\n    branch: string;\n    buildNumber: number | bigint;\n    channel: string;\n    commitHash: string;\n    major: number | bigint;\n    minor: number | bigint;\n  }) {\n    super();\n    this.branch = branch;\n    this.buildNumber = buildNumber;\n    this.channel = channel;\n    this.commitHash = commitHash;\n    this.major = major;\n    this.minor = minor;\n\n    this.attribute_map = {\n      branch: 'branch',\n      buildNumber: 'build_number',\n      channel: 'channel',\n      commitHash: 'commit_hash',\n      major: 'major',\n      minor: 'minor',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): BuildVersion {\n    /* eslint-disable dot-notation */\n    if (typeof data['branch'] === 'undefined')\n      throw new Error(`Response is missing required field 'branch': ${data}`);\n    if (typeof data['build_number'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'build_number': ${data}`\n      );\n    if (typeof data['channel'] === 'undefined')\n      throw new Error(`Response is missing required field 'channel': ${data}`);\n    if (typeof data['commit_hash'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'commit_hash': ${data}`\n      );\n    if (typeof data['major'] === 'undefined')\n      throw new Error(`Response is missing required field 'major': ${data}`);\n    if (typeof data['minor'] === 'undefined')\n      throw new Error(`Response is missing required field 'minor': ${data}`);\n    return new BuildVersion({\n      branch: data['branch'],\n      buildNumber: data['build_number'],\n      channel: data['channel'],\n      commitHash: data['commit_hash'],\n      major: data['major'],\n      minor: data['minor'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Teal compile Result\n */\nexport class CompileResponse extends BaseModel {\n  /**\n   * base32 SHA512_256 of program bytes (Address style)\n   */\n  public hash: string;\n\n  /**\n   * base64 encoded program bytes\n   */\n  public result: string;\n\n  /**\n   * JSON of the source map\n   */\n  public sourcemap?: Record<string, any>;\n\n  /**\n   * Creates a new `CompileResponse` object.\n   * @param hash - base32 SHA512_256 of program bytes (Address style)\n   * @param result - base64 encoded program bytes\n   * @param sourcemap - JSON of the source map\n   */\n  constructor({\n    hash,\n    result,\n    sourcemap,\n  }: {\n    hash: string;\n    result: string;\n    sourcemap?: Record<string, any>;\n  }) {\n    super();\n    this.hash = hash;\n    this.result = result;\n    this.sourcemap = sourcemap;\n\n    this.attribute_map = {\n      hash: 'hash',\n      result: 'result',\n      sourcemap: 'sourcemap',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): CompileResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['hash'] === 'undefined')\n      throw new Error(`Response is missing required field 'hash': ${data}`);\n    if (typeof data['result'] === 'undefined')\n      throw new Error(`Response is missing required field 'result': ${data}`);\n    return new CompileResponse({\n      hash: data['hash'],\n      result: data['result'],\n      sourcemap: data['sourcemap'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Teal disassembly Result\n */\nexport class DisassembleResponse extends BaseModel {\n  /**\n   * disassembled Teal code\n   */\n  public result: string;\n\n  /**\n   * Creates a new `DisassembleResponse` object.\n   * @param result - disassembled Teal code\n   */\n  constructor({ result }: { result: string }) {\n    super();\n    this.result = result;\n\n    this.attribute_map = {\n      result: 'result',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): DisassembleResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['result'] === 'undefined')\n      throw new Error(`Response is missing required field 'result': ${data}`);\n    return new DisassembleResponse({\n      result: data['result'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Request data type for dryrun endpoint. Given the Transactions and simulated\n * ledger state upload, run TEAL scripts and return debugging information.\n */\nexport class DryrunRequest extends BaseModel {\n  public accounts: Account[];\n\n  public apps: Application[];\n\n  /**\n   * LatestTimestamp is available to some TEAL scripts. Defaults to the latest\n   * confirmed timestamp this algod is attached to.\n   */\n  public latestTimestamp: number | bigint;\n\n  /**\n   * ProtocolVersion specifies a specific version string to operate under, otherwise\n   * whatever the current protocol of the network this algod is running in.\n   */\n  public protocolVersion: string;\n\n  /**\n   * Round is available to some TEAL scripts. Defaults to the current round on the\n   * network this algod is attached to.\n   */\n  public round: number | bigint;\n\n  public sources: DryrunSource[];\n\n  public txns: EncodedSignedTransaction[];\n\n  /**\n   * Creates a new `DryrunRequest` object.\n   * @param accounts -\n   * @param apps -\n   * @param latestTimestamp - LatestTimestamp is available to some TEAL scripts. Defaults to the latest\n   * confirmed timestamp this algod is attached to.\n   * @param protocolVersion - ProtocolVersion specifies a specific version string to operate under, otherwise\n   * whatever the current protocol of the network this algod is running in.\n   * @param round - Round is available to some TEAL scripts. Defaults to the current round on the\n   * network this algod is attached to.\n   * @param sources -\n   * @param txns -\n   */\n  constructor({\n    accounts,\n    apps,\n    latestTimestamp,\n    protocolVersion,\n    round,\n    sources,\n    txns,\n  }: {\n    accounts: Account[];\n    apps: Application[];\n    latestTimestamp: number | bigint;\n    protocolVersion: string;\n    round: number | bigint;\n    sources: DryrunSource[];\n    txns: EncodedSignedTransaction[];\n  }) {\n    super();\n    this.accounts = accounts;\n    this.apps = apps;\n    this.latestTimestamp = latestTimestamp;\n    this.protocolVersion = protocolVersion;\n    this.round = round;\n    this.sources = sources;\n    this.txns = txns;\n\n    this.attribute_map = {\n      accounts: 'accounts',\n      apps: 'apps',\n      latestTimestamp: 'latest-timestamp',\n      protocolVersion: 'protocol-version',\n      round: 'round',\n      sources: 'sources',\n      txns: 'txns',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): DryrunRequest {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['accounts']))\n      throw new Error(\n        `Response is missing required array field 'accounts': ${data}`\n      );\n    if (!Array.isArray(data['apps']))\n      throw new Error(\n        `Response is missing required array field 'apps': ${data}`\n      );\n    if (typeof data['latest-timestamp'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'latest-timestamp': ${data}`\n      );\n    if (typeof data['protocol-version'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'protocol-version': ${data}`\n      );\n    if (typeof data['round'] === 'undefined')\n      throw new Error(`Response is missing required field 'round': ${data}`);\n    if (!Array.isArray(data['sources']))\n      throw new Error(\n        `Response is missing required array field 'sources': ${data}`\n      );\n    if (!Array.isArray(data['txns']))\n      throw new Error(\n        `Response is missing required array field 'txns': ${data}`\n      );\n    return new DryrunRequest({\n      accounts: data['accounts'].map(Account.from_obj_for_encoding),\n      apps: data['apps'].map(Application.from_obj_for_encoding),\n      latestTimestamp: data['latest-timestamp'],\n      protocolVersion: data['protocol-version'],\n      round: data['round'],\n      sources: data['sources'].map(DryrunSource.from_obj_for_encoding),\n      txns: data['txns'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * DryrunResponse contains per-txn debug information from a dryrun.\n */\nexport class DryrunResponse extends BaseModel {\n  public error: string;\n\n  /**\n   * Protocol version is the protocol version Dryrun was operated under.\n   */\n  public protocolVersion: string;\n\n  public txns: DryrunTxnResult[];\n\n  /**\n   * Creates a new `DryrunResponse` object.\n   * @param error -\n   * @param protocolVersion - Protocol version is the protocol version Dryrun was operated under.\n   * @param txns -\n   */\n  constructor({\n    error,\n    protocolVersion,\n    txns,\n  }: {\n    error: string;\n    protocolVersion: string;\n    txns: DryrunTxnResult[];\n  }) {\n    super();\n    this.error = error;\n    this.protocolVersion = protocolVersion;\n    this.txns = txns;\n\n    this.attribute_map = {\n      error: 'error',\n      protocolVersion: 'protocol-version',\n      txns: 'txns',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): DryrunResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['error'] === 'undefined')\n      throw new Error(`Response is missing required field 'error': ${data}`);\n    if (typeof data['protocol-version'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'protocol-version': ${data}`\n      );\n    if (!Array.isArray(data['txns']))\n      throw new Error(\n        `Response is missing required array field 'txns': ${data}`\n      );\n    return new DryrunResponse({\n      error: data['error'],\n      protocolVersion: data['protocol-version'],\n      txns: data['txns'].map(DryrunTxnResult.from_obj_for_encoding),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * DryrunSource is TEAL source text that gets uploaded, compiled, and inserted into\n * transactions or application state.\n */\nexport class DryrunSource extends BaseModel {\n  /**\n   * FieldName is what kind of sources this is. If lsig then it goes into the\n   * transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the\n   * Approval Program or Clear State Program of application[this.AppIndex].\n   */\n  public fieldName: string;\n\n  public source: string;\n\n  public txnIndex: number | bigint;\n\n  public appIndex: number | bigint;\n\n  /**\n   * Creates a new `DryrunSource` object.\n   * @param fieldName - FieldName is what kind of sources this is. If lsig then it goes into the\n   * transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the\n   * Approval Program or Clear State Program of application[this.AppIndex].\n   * @param source -\n   * @param txnIndex -\n   * @param appIndex -\n   */\n  constructor({\n    fieldName,\n    source,\n    txnIndex,\n    appIndex,\n  }: {\n    fieldName: string;\n    source: string;\n    txnIndex: number | bigint;\n    appIndex: number | bigint;\n  }) {\n    super();\n    this.fieldName = fieldName;\n    this.source = source;\n    this.txnIndex = txnIndex;\n    this.appIndex = appIndex;\n\n    this.attribute_map = {\n      fieldName: 'field-name',\n      source: 'source',\n      txnIndex: 'txn-index',\n      appIndex: 'app-index',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): DryrunSource {\n    /* eslint-disable dot-notation */\n    if (typeof data['field-name'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'field-name': ${data}`\n      );\n    if (typeof data['source'] === 'undefined')\n      throw new Error(`Response is missing required field 'source': ${data}`);\n    if (typeof data['txn-index'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'txn-index': ${data}`\n      );\n    if (typeof data['app-index'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'app-index': ${data}`\n      );\n    return new DryrunSource({\n      fieldName: data['field-name'],\n      source: data['source'],\n      txnIndex: data['txn-index'],\n      appIndex: data['app-index'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Stores the TEAL eval step data\n */\nexport class DryrunState extends BaseModel {\n  /**\n   * Line number\n   */\n  public line: number | bigint;\n\n  /**\n   * Program counter\n   */\n  public pc: number | bigint;\n\n  public stack: TealValue[];\n\n  /**\n   * Evaluation error if any\n   */\n  public error?: string;\n\n  public scratch?: TealValue[];\n\n  /**\n   * Creates a new `DryrunState` object.\n   * @param line - Line number\n   * @param pc - Program counter\n   * @param stack -\n   * @param error - Evaluation error if any\n   * @param scratch -\n   */\n  constructor({\n    line,\n    pc,\n    stack,\n    error,\n    scratch,\n  }: {\n    line: number | bigint;\n    pc: number | bigint;\n    stack: TealValue[];\n    error?: string;\n    scratch?: TealValue[];\n  }) {\n    super();\n    this.line = line;\n    this.pc = pc;\n    this.stack = stack;\n    this.error = error;\n    this.scratch = scratch;\n\n    this.attribute_map = {\n      line: 'line',\n      pc: 'pc',\n      stack: 'stack',\n      error: 'error',\n      scratch: 'scratch',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): DryrunState {\n    /* eslint-disable dot-notation */\n    if (typeof data['line'] === 'undefined')\n      throw new Error(`Response is missing required field 'line': ${data}`);\n    if (typeof data['pc'] === 'undefined')\n      throw new Error(`Response is missing required field 'pc': ${data}`);\n    if (!Array.isArray(data['stack']))\n      throw new Error(\n        `Response is missing required array field 'stack': ${data}`\n      );\n    return new DryrunState({\n      line: data['line'],\n      pc: data['pc'],\n      stack: data['stack'].map(TealValue.from_obj_for_encoding),\n      error: data['error'],\n      scratch:\n        typeof data['scratch'] !== 'undefined'\n          ? data['scratch'].map(TealValue.from_obj_for_encoding)\n          : undefined,\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * DryrunTxnResult contains any LogicSig or ApplicationCall program debug\n * information and state updates from a dryrun.\n */\nexport class DryrunTxnResult extends BaseModel {\n  /**\n   * Disassembled program line by line.\n   */\n  public disassembly: string[];\n\n  public appCallMessages?: string[];\n\n  public appCallTrace?: DryrunState[];\n\n  /**\n   * Budget added during execution of app call transaction.\n   */\n  public budgetAdded?: number | bigint;\n\n  /**\n   * Budget consumed during execution of app call transaction.\n   */\n  public budgetConsumed?: number | bigint;\n\n  /**\n   * Application state delta.\n   */\n  public globalDelta?: EvalDeltaKeyValue[];\n\n  public localDeltas?: AccountStateDelta[];\n\n  /**\n   * Disassembled lsig program line by line.\n   */\n  public logicSigDisassembly?: string[];\n\n  public logicSigMessages?: string[];\n\n  public logicSigTrace?: DryrunState[];\n\n  public logs?: Uint8Array[];\n\n  /**\n   * Creates a new `DryrunTxnResult` object.\n   * @param disassembly - Disassembled program line by line.\n   * @param appCallMessages -\n   * @param appCallTrace -\n   * @param budgetAdded - Budget added during execution of app call transaction.\n   * @param budgetConsumed - Budget consumed during execution of app call transaction.\n   * @param globalDelta - Application state delta.\n   * @param localDeltas -\n   * @param logicSigDisassembly - Disassembled lsig program line by line.\n   * @param logicSigMessages -\n   * @param logicSigTrace -\n   * @param logs -\n   */\n  constructor({\n    disassembly,\n    appCallMessages,\n    appCallTrace,\n    budgetAdded,\n    budgetConsumed,\n    globalDelta,\n    localDeltas,\n    logicSigDisassembly,\n    logicSigMessages,\n    logicSigTrace,\n    logs,\n  }: {\n    disassembly: string[];\n    appCallMessages?: string[];\n    appCallTrace?: DryrunState[];\n    budgetAdded?: number | bigint;\n    budgetConsumed?: number | bigint;\n    globalDelta?: EvalDeltaKeyValue[];\n    localDeltas?: AccountStateDelta[];\n    logicSigDisassembly?: string[];\n    logicSigMessages?: string[];\n    logicSigTrace?: DryrunState[];\n    logs?: Uint8Array[];\n  }) {\n    super();\n    this.disassembly = disassembly;\n    this.appCallMessages = appCallMessages;\n    this.appCallTrace = appCallTrace;\n    this.budgetAdded = budgetAdded;\n    this.budgetConsumed = budgetConsumed;\n    this.globalDelta = globalDelta;\n    this.localDeltas = localDeltas;\n    this.logicSigDisassembly = logicSigDisassembly;\n    this.logicSigMessages = logicSigMessages;\n    this.logicSigTrace = logicSigTrace;\n    this.logs = logs;\n\n    this.attribute_map = {\n      disassembly: 'disassembly',\n      appCallMessages: 'app-call-messages',\n      appCallTrace: 'app-call-trace',\n      budgetAdded: 'budget-added',\n      budgetConsumed: 'budget-consumed',\n      globalDelta: 'global-delta',\n      localDeltas: 'local-deltas',\n      logicSigDisassembly: 'logic-sig-disassembly',\n      logicSigMessages: 'logic-sig-messages',\n      logicSigTrace: 'logic-sig-trace',\n      logs: 'logs',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): DryrunTxnResult {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['disassembly']))\n      throw new Error(\n        `Response is missing required array field 'disassembly': ${data}`\n      );\n    return new DryrunTxnResult({\n      disassembly: data['disassembly'],\n      appCallMessages: data['app-call-messages'],\n      appCallTrace:\n        typeof data['app-call-trace'] !== 'undefined'\n          ? data['app-call-trace'].map(DryrunState.from_obj_for_encoding)\n          : undefined,\n      budgetAdded: data['budget-added'],\n      budgetConsumed: data['budget-consumed'],\n      globalDelta:\n        typeof data['global-delta'] !== 'undefined'\n          ? data['global-delta'].map(EvalDeltaKeyValue.from_obj_for_encoding)\n          : undefined,\n      localDeltas:\n        typeof data['local-deltas'] !== 'undefined'\n          ? data['local-deltas'].map(AccountStateDelta.from_obj_for_encoding)\n          : undefined,\n      logicSigDisassembly: data['logic-sig-disassembly'],\n      logicSigMessages: data['logic-sig-messages'],\n      logicSigTrace:\n        typeof data['logic-sig-trace'] !== 'undefined'\n          ? data['logic-sig-trace'].map(DryrunState.from_obj_for_encoding)\n          : undefined,\n      logs: data['logs'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * An error response with optional data field.\n */\nexport class ErrorResponse extends BaseModel {\n  public message: string;\n\n  public data?: Record<string, any>;\n\n  /**\n   * Creates a new `ErrorResponse` object.\n   * @param message -\n   * @param data -\n   */\n  constructor({\n    message,\n    data,\n  }: {\n    message: string;\n    data?: Record<string, any>;\n  }) {\n    super();\n    this.message = message;\n    this.data = data;\n\n    this.attribute_map = {\n      message: 'message',\n      data: 'data',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): ErrorResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['message'] === 'undefined')\n      throw new Error(`Response is missing required field 'message': ${data}`);\n    return new ErrorResponse({\n      message: data['message'],\n      data: data['data'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Represents a TEAL value delta.\n */\nexport class EvalDelta extends BaseModel {\n  /**\n   * (at) delta action.\n   */\n  public action: number | bigint;\n\n  /**\n   * (bs) bytes value.\n   */\n  public bytes?: string;\n\n  /**\n   * (ui) uint value.\n   */\n  public uint?: number | bigint;\n\n  /**\n   * Creates a new `EvalDelta` object.\n   * @param action - (at) delta action.\n   * @param bytes - (bs) bytes value.\n   * @param uint - (ui) uint value.\n   */\n  constructor({\n    action,\n    bytes,\n    uint,\n  }: {\n    action: number | bigint;\n    bytes?: string;\n    uint?: number | bigint;\n  }) {\n    super();\n    this.action = action;\n    this.bytes = bytes;\n    this.uint = uint;\n\n    this.attribute_map = {\n      action: 'action',\n      bytes: 'bytes',\n      uint: 'uint',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): EvalDelta {\n    /* eslint-disable dot-notation */\n    if (typeof data['action'] === 'undefined')\n      throw new Error(`Response is missing required field 'action': ${data}`);\n    return new EvalDelta({\n      action: data['action'],\n      bytes: data['bytes'],\n      uint: data['uint'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Key-value pairs for StateDelta.\n */\nexport class EvalDeltaKeyValue extends BaseModel {\n  public key: string;\n\n  /**\n   * Represents a TEAL value delta.\n   */\n  public value: EvalDelta;\n\n  /**\n   * Creates a new `EvalDeltaKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value delta.\n   */\n  constructor({ key, value }: { key: string; value: EvalDelta }) {\n    super();\n    this.key = key;\n    this.value = value;\n\n    this.attribute_map = {\n      key: 'key',\n      value: 'value',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): EvalDeltaKeyValue {\n    /* eslint-disable dot-notation */\n    if (typeof data['key'] === 'undefined')\n      throw new Error(`Response is missing required field 'key': ${data}`);\n    if (typeof data['value'] === 'undefined')\n      throw new Error(`Response is missing required field 'value': ${data}`);\n    return new EvalDeltaKeyValue({\n      key: data['key'],\n      value: EvalDelta.from_obj_for_encoding(data['value']),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Proof of membership and position of a light block header.\n */\nexport class LightBlockHeaderProof extends BaseModel {\n  /**\n   * The index of the light block header in the vector commitment tree\n   */\n  public index: number | bigint;\n\n  /**\n   * The encoded proof.\n   */\n  public proof: Uint8Array;\n\n  /**\n   * Represents the depth of the tree that is being proven, i.e. the number of edges\n   * from a leaf to the root.\n   */\n  public treedepth: number | bigint;\n\n  /**\n   * Creates a new `LightBlockHeaderProof` object.\n   * @param index - The index of the light block header in the vector commitment tree\n   * @param proof - The encoded proof.\n   * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\n   * from a leaf to the root.\n   */\n  constructor({\n    index,\n    proof,\n    treedepth,\n  }: {\n    index: number | bigint;\n    proof: string | Uint8Array;\n    treedepth: number | bigint;\n  }) {\n    super();\n    this.index = index;\n    this.proof =\n      typeof proof === 'string'\n        ? new Uint8Array(Buffer.from(proof, 'base64'))\n        : proof;\n    this.treedepth = treedepth;\n\n    this.attribute_map = {\n      index: 'index',\n      proof: 'proof',\n      treedepth: 'treedepth',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): LightBlockHeaderProof {\n    /* eslint-disable dot-notation */\n    if (typeof data['index'] === 'undefined')\n      throw new Error(`Response is missing required field 'index': ${data}`);\n    if (typeof data['proof'] === 'undefined')\n      throw new Error(`Response is missing required field 'proof': ${data}`);\n    if (typeof data['treedepth'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'treedepth': ${data}`\n      );\n    return new LightBlockHeaderProof({\n      index: data['index'],\n      proof: data['proof'],\n      treedepth: data['treedepth'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n *\n */\nexport class NodeStatusResponse extends BaseModel {\n  /**\n   * CatchupTime in nanoseconds\n   */\n  public catchupTime: number | bigint;\n\n  /**\n   * LastRound indicates the last round seen\n   */\n  public lastRound: number | bigint;\n\n  /**\n   * LastVersion indicates the last consensus version supported\n   */\n  public lastVersion: string;\n\n  /**\n   * NextVersion of consensus protocol to use\n   */\n  public nextVersion: string;\n\n  /**\n   * NextVersionRound is the round at which the next consensus version will apply\n   */\n  public nextVersionRound: number | bigint;\n\n  /**\n   * NextVersionSupported indicates whether the next consensus version is supported\n   * by this node\n   */\n  public nextVersionSupported: boolean;\n\n  /**\n   * StoppedAtUnsupportedRound indicates that the node does not support the new\n   * rounds and has stopped making progress\n   */\n  public stoppedAtUnsupportedRound: boolean;\n\n  /**\n   * TimeSinceLastRound in nanoseconds\n   */\n  public timeSinceLastRound: number | bigint;\n\n  /**\n   * The current catchpoint that is being caught up to\n   */\n  public catchpoint?: string;\n\n  /**\n   * The number of blocks that have already been obtained by the node as part of the\n   * catchup\n   */\n  public catchpointAcquiredBlocks?: number | bigint;\n\n  /**\n   * The number of accounts from the current catchpoint that have been processed so\n   * far as part of the catchup\n   */\n  public catchpointProcessedAccounts?: number | bigint;\n\n  /**\n   * The number of key-values (KVs) from the current catchpoint that have been\n   * processed so far as part of the catchup\n   */\n  public catchpointProcessedKvs?: number | bigint;\n\n  /**\n   * The total number of accounts included in the current catchpoint\n   */\n  public catchpointTotalAccounts?: number | bigint;\n\n  /**\n   * The total number of blocks that are required to complete the current catchpoint\n   * catchup\n   */\n  public catchpointTotalBlocks?: number | bigint;\n\n  /**\n   * The total number of key-values (KVs) included in the current catchpoint\n   */\n  public catchpointTotalKvs?: number | bigint;\n\n  /**\n   * The number of accounts from the current catchpoint that have been verified so\n   * far as part of the catchup\n   */\n  public catchpointVerifiedAccounts?: number | bigint;\n\n  /**\n   * The number of key-values (KVs) from the current catchpoint that have been\n   * verified so far as part of the catchup\n   */\n  public catchpointVerifiedKvs?: number | bigint;\n\n  /**\n   * The last catchpoint seen by the node\n   */\n  public lastCatchpoint?: string;\n\n  /**\n   * Creates a new `NodeStatusResponse` object.\n   * @param catchupTime - CatchupTime in nanoseconds\n   * @param lastRound - LastRound indicates the last round seen\n   * @param lastVersion - LastVersion indicates the last consensus version supported\n   * @param nextVersion - NextVersion of consensus protocol to use\n   * @param nextVersionRound - NextVersionRound is the round at which the next consensus version will apply\n   * @param nextVersionSupported - NextVersionSupported indicates whether the next consensus version is supported\n   * by this node\n   * @param stoppedAtUnsupportedRound - StoppedAtUnsupportedRound indicates that the node does not support the new\n   * rounds and has stopped making progress\n   * @param timeSinceLastRound - TimeSinceLastRound in nanoseconds\n   * @param catchpoint - The current catchpoint that is being caught up to\n   * @param catchpointAcquiredBlocks - The number of blocks that have already been obtained by the node as part of the\n   * catchup\n   * @param catchpointProcessedAccounts - The number of accounts from the current catchpoint that have been processed so\n   * far as part of the catchup\n   * @param catchpointProcessedKvs - The number of key-values (KVs) from the current catchpoint that have been\n   * processed so far as part of the catchup\n   * @param catchpointTotalAccounts - The total number of accounts included in the current catchpoint\n   * @param catchpointTotalBlocks - The total number of blocks that are required to complete the current catchpoint\n   * catchup\n   * @param catchpointTotalKvs - The total number of key-values (KVs) included in the current catchpoint\n   * @param catchpointVerifiedAccounts - The number of accounts from the current catchpoint that have been verified so\n   * far as part of the catchup\n   * @param catchpointVerifiedKvs - The number of key-values (KVs) from the current catchpoint that have been\n   * verified so far as part of the catchup\n   * @param lastCatchpoint - The last catchpoint seen by the node\n   */\n  constructor({\n    catchupTime,\n    lastRound,\n    lastVersion,\n    nextVersion,\n    nextVersionRound,\n    nextVersionSupported,\n    stoppedAtUnsupportedRound,\n    timeSinceLastRound,\n    catchpoint,\n    catchpointAcquiredBlocks,\n    catchpointProcessedAccounts,\n    catchpointProcessedKvs,\n    catchpointTotalAccounts,\n    catchpointTotalBlocks,\n    catchpointTotalKvs,\n    catchpointVerifiedAccounts,\n    catchpointVerifiedKvs,\n    lastCatchpoint,\n  }: {\n    catchupTime: number | bigint;\n    lastRound: number | bigint;\n    lastVersion: string;\n    nextVersion: string;\n    nextVersionRound: number | bigint;\n    nextVersionSupported: boolean;\n    stoppedAtUnsupportedRound: boolean;\n    timeSinceLastRound: number | bigint;\n    catchpoint?: string;\n    catchpointAcquiredBlocks?: number | bigint;\n    catchpointProcessedAccounts?: number | bigint;\n    catchpointProcessedKvs?: number | bigint;\n    catchpointTotalAccounts?: number | bigint;\n    catchpointTotalBlocks?: number | bigint;\n    catchpointTotalKvs?: number | bigint;\n    catchpointVerifiedAccounts?: number | bigint;\n    catchpointVerifiedKvs?: number | bigint;\n    lastCatchpoint?: string;\n  }) {\n    super();\n    this.catchupTime = catchupTime;\n    this.lastRound = lastRound;\n    this.lastVersion = lastVersion;\n    this.nextVersion = nextVersion;\n    this.nextVersionRound = nextVersionRound;\n    this.nextVersionSupported = nextVersionSupported;\n    this.stoppedAtUnsupportedRound = stoppedAtUnsupportedRound;\n    this.timeSinceLastRound = timeSinceLastRound;\n    this.catchpoint = catchpoint;\n    this.catchpointAcquiredBlocks = catchpointAcquiredBlocks;\n    this.catchpointProcessedAccounts = catchpointProcessedAccounts;\n    this.catchpointProcessedKvs = catchpointProcessedKvs;\n    this.catchpointTotalAccounts = catchpointTotalAccounts;\n    this.catchpointTotalBlocks = catchpointTotalBlocks;\n    this.catchpointTotalKvs = catchpointTotalKvs;\n    this.catchpointVerifiedAccounts = catchpointVerifiedAccounts;\n    this.catchpointVerifiedKvs = catchpointVerifiedKvs;\n    this.lastCatchpoint = lastCatchpoint;\n\n    this.attribute_map = {\n      catchupTime: 'catchup-time',\n      lastRound: 'last-round',\n      lastVersion: 'last-version',\n      nextVersion: 'next-version',\n      nextVersionRound: 'next-version-round',\n      nextVersionSupported: 'next-version-supported',\n      stoppedAtUnsupportedRound: 'stopped-at-unsupported-round',\n      timeSinceLastRound: 'time-since-last-round',\n      catchpoint: 'catchpoint',\n      catchpointAcquiredBlocks: 'catchpoint-acquired-blocks',\n      catchpointProcessedAccounts: 'catchpoint-processed-accounts',\n      catchpointProcessedKvs: 'catchpoint-processed-kvs',\n      catchpointTotalAccounts: 'catchpoint-total-accounts',\n      catchpointTotalBlocks: 'catchpoint-total-blocks',\n      catchpointTotalKvs: 'catchpoint-total-kvs',\n      catchpointVerifiedAccounts: 'catchpoint-verified-accounts',\n      catchpointVerifiedKvs: 'catchpoint-verified-kvs',\n      lastCatchpoint: 'last-catchpoint',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): NodeStatusResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['catchup-time'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'catchup-time': ${data}`\n      );\n    if (typeof data['last-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'last-round': ${data}`\n      );\n    if (typeof data['last-version'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'last-version': ${data}`\n      );\n    if (typeof data['next-version'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'next-version': ${data}`\n      );\n    if (typeof data['next-version-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'next-version-round': ${data}`\n      );\n    if (typeof data['next-version-supported'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'next-version-supported': ${data}`\n      );\n    if (typeof data['stopped-at-unsupported-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'stopped-at-unsupported-round': ${data}`\n      );\n    if (typeof data['time-since-last-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'time-since-last-round': ${data}`\n      );\n    return new NodeStatusResponse({\n      catchupTime: data['catchup-time'],\n      lastRound: data['last-round'],\n      lastVersion: data['last-version'],\n      nextVersion: data['next-version'],\n      nextVersionRound: data['next-version-round'],\n      nextVersionSupported: data['next-version-supported'],\n      stoppedAtUnsupportedRound: data['stopped-at-unsupported-round'],\n      timeSinceLastRound: data['time-since-last-round'],\n      catchpoint: data['catchpoint'],\n      catchpointAcquiredBlocks: data['catchpoint-acquired-blocks'],\n      catchpointProcessedAccounts: data['catchpoint-processed-accounts'],\n      catchpointProcessedKvs: data['catchpoint-processed-kvs'],\n      catchpointTotalAccounts: data['catchpoint-total-accounts'],\n      catchpointTotalBlocks: data['catchpoint-total-blocks'],\n      catchpointTotalKvs: data['catchpoint-total-kvs'],\n      catchpointVerifiedAccounts: data['catchpoint-verified-accounts'],\n      catchpointVerifiedKvs: data['catchpoint-verified-kvs'],\n      lastCatchpoint: data['last-catchpoint'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Details about a pending transaction. If the transaction was recently confirmed,\n * includes confirmation details like the round and reward details.\n */\nexport class PendingTransactionResponse extends BaseModel {\n  /**\n   * Indicates that the transaction was kicked out of this node's transaction pool\n   * (and specifies why that happened). An empty string indicates the transaction\n   * wasn't kicked out of this node's txpool due to an error.\n   */\n  public poolError: string;\n\n  /**\n   * The raw signed transaction.\n   */\n  public txn: EncodedSignedTransaction;\n\n  /**\n   * The application index if the transaction was found and it created an\n   * application.\n   */\n  public applicationIndex?: number | bigint;\n\n  /**\n   * The number of the asset's unit that were transferred to the close-to address.\n   */\n  public assetClosingAmount?: number | bigint;\n\n  /**\n   * The asset index if the transaction was found and it created an asset.\n   */\n  public assetIndex?: number | bigint;\n\n  /**\n   * Rewards in microalgos applied to the close remainder to account.\n   */\n  public closeRewards?: number | bigint;\n\n  /**\n   * Closing amount for the transaction.\n   */\n  public closingAmount?: number | bigint;\n\n  /**\n   * The round where this transaction was confirmed, if present.\n   */\n  public confirmedRound?: number | bigint;\n\n  /**\n   * (gd) Global state key/value changes for the application being executed by this\n   * transaction.\n   */\n  public globalStateDelta?: EvalDeltaKeyValue[];\n\n  /**\n   * Inner transactions produced by application execution.\n   */\n  public innerTxns?: PendingTransactionResponse[];\n\n  /**\n   * (ld) Local state key/value changes for the application being executed by this\n   * transaction.\n   */\n  public localStateDelta?: AccountStateDelta[];\n\n  /**\n   * (lg) Logs for the application being executed by this transaction.\n   */\n  public logs?: Uint8Array[];\n\n  /**\n   * Rewards in microalgos applied to the receiver account.\n   */\n  public receiverRewards?: number | bigint;\n\n  /**\n   * Rewards in microalgos applied to the sender account.\n   */\n  public senderRewards?: number | bigint;\n\n  /**\n   * Creates a new `PendingTransactionResponse` object.\n   * @param poolError - Indicates that the transaction was kicked out of this node's transaction pool\n   * (and specifies why that happened). An empty string indicates the transaction\n   * wasn't kicked out of this node's txpool due to an error.\n   * @param txn - The raw signed transaction.\n   * @param applicationIndex - The application index if the transaction was found and it created an\n   * application.\n   * @param assetClosingAmount - The number of the asset's unit that were transferred to the close-to address.\n   * @param assetIndex - The asset index if the transaction was found and it created an asset.\n   * @param closeRewards - Rewards in microalgos applied to the close remainder to account.\n   * @param closingAmount - Closing amount for the transaction.\n   * @param confirmedRound - The round where this transaction was confirmed, if present.\n   * @param globalStateDelta - (gd) Global state key/value changes for the application being executed by this\n   * transaction.\n   * @param innerTxns - Inner transactions produced by application execution.\n   * @param localStateDelta - (ld) Local state key/value changes for the application being executed by this\n   * transaction.\n   * @param logs - (lg) Logs for the application being executed by this transaction.\n   * @param receiverRewards - Rewards in microalgos applied to the receiver account.\n   * @param senderRewards - Rewards in microalgos applied to the sender account.\n   */\n  constructor({\n    poolError,\n    txn,\n    applicationIndex,\n    assetClosingAmount,\n    assetIndex,\n    closeRewards,\n    closingAmount,\n    confirmedRound,\n    globalStateDelta,\n    innerTxns,\n    localStateDelta,\n    logs,\n    receiverRewards,\n    senderRewards,\n  }: {\n    poolError: string;\n    txn: EncodedSignedTransaction;\n    applicationIndex?: number | bigint;\n    assetClosingAmount?: number | bigint;\n    assetIndex?: number | bigint;\n    closeRewards?: number | bigint;\n    closingAmount?: number | bigint;\n    confirmedRound?: number | bigint;\n    globalStateDelta?: EvalDeltaKeyValue[];\n    innerTxns?: PendingTransactionResponse[];\n    localStateDelta?: AccountStateDelta[];\n    logs?: Uint8Array[];\n    receiverRewards?: number | bigint;\n    senderRewards?: number | bigint;\n  }) {\n    super();\n    this.poolError = poolError;\n    this.txn = txn;\n    this.applicationIndex = applicationIndex;\n    this.assetClosingAmount = assetClosingAmount;\n    this.assetIndex = assetIndex;\n    this.closeRewards = closeRewards;\n    this.closingAmount = closingAmount;\n    this.confirmedRound = confirmedRound;\n    this.globalStateDelta = globalStateDelta;\n    this.innerTxns = innerTxns;\n    this.localStateDelta = localStateDelta;\n    this.logs = logs;\n    this.receiverRewards = receiverRewards;\n    this.senderRewards = senderRewards;\n\n    this.attribute_map = {\n      poolError: 'pool-error',\n      txn: 'txn',\n      applicationIndex: 'application-index',\n      assetClosingAmount: 'asset-closing-amount',\n      assetIndex: 'asset-index',\n      closeRewards: 'close-rewards',\n      closingAmount: 'closing-amount',\n      confirmedRound: 'confirmed-round',\n      globalStateDelta: 'global-state-delta',\n      innerTxns: 'inner-txns',\n      localStateDelta: 'local-state-delta',\n      logs: 'logs',\n      receiverRewards: 'receiver-rewards',\n      senderRewards: 'sender-rewards',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): PendingTransactionResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['pool-error'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'pool-error': ${data}`\n      );\n    if (typeof data['txn'] === 'undefined')\n      throw new Error(`Response is missing required field 'txn': ${data}`);\n    return new PendingTransactionResponse({\n      poolError: data['pool-error'],\n      txn: data['txn'],\n      applicationIndex: data['application-index'],\n      assetClosingAmount: data['asset-closing-amount'],\n      assetIndex: data['asset-index'],\n      closeRewards: data['close-rewards'],\n      closingAmount: data['closing-amount'],\n      confirmedRound: data['confirmed-round'],\n      globalStateDelta:\n        typeof data['global-state-delta'] !== 'undefined'\n          ? data['global-state-delta'].map(\n              EvalDeltaKeyValue.from_obj_for_encoding\n            )\n          : undefined,\n      innerTxns:\n        typeof data['inner-txns'] !== 'undefined'\n          ? data['inner-txns'].map(\n              PendingTransactionResponse.from_obj_for_encoding\n            )\n          : undefined,\n      localStateDelta:\n        typeof data['local-state-delta'] !== 'undefined'\n          ? data['local-state-delta'].map(\n              AccountStateDelta.from_obj_for_encoding\n            )\n          : undefined,\n      logs: data['logs'],\n      receiverRewards: data['receiver-rewards'],\n      senderRewards: data['sender-rewards'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * A potentially truncated list of transactions currently in the node's transaction\n * pool. You can compute whether or not the list is truncated if the number of\n * elements in the **top-transactions** array is fewer than **total-transactions**.\n */\nexport class PendingTransactionsResponse extends BaseModel {\n  /**\n   * An array of signed transaction objects.\n   */\n  public topTransactions: EncodedSignedTransaction[];\n\n  /**\n   * Total number of transactions in the pool.\n   */\n  public totalTransactions: number | bigint;\n\n  /**\n   * Creates a new `PendingTransactionsResponse` object.\n   * @param topTransactions - An array of signed transaction objects.\n   * @param totalTransactions - Total number of transactions in the pool.\n   */\n  constructor({\n    topTransactions,\n    totalTransactions,\n  }: {\n    topTransactions: EncodedSignedTransaction[];\n    totalTransactions: number | bigint;\n  }) {\n    super();\n    this.topTransactions = topTransactions;\n    this.totalTransactions = totalTransactions;\n\n    this.attribute_map = {\n      topTransactions: 'top-transactions',\n      totalTransactions: 'total-transactions',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): PendingTransactionsResponse {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['top-transactions']))\n      throw new Error(\n        `Response is missing required array field 'top-transactions': ${data}`\n      );\n    if (typeof data['total-transactions'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-transactions': ${data}`\n      );\n    return new PendingTransactionsResponse({\n      topTransactions: data['top-transactions'],\n      totalTransactions: data['total-transactions'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Transaction ID of the submission.\n */\nexport class PostTransactionsResponse extends BaseModel {\n  /**\n   * encoding of the transaction hash.\n   */\n  public txid: string;\n\n  /**\n   * Creates a new `PostTransactionsResponse` object.\n   * @param txid - encoding of the transaction hash.\n   */\n  constructor({ txid }: { txid: string }) {\n    super();\n    this.txid = txid;\n\n    this.attribute_map = {\n      txid: 'txId',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): PostTransactionsResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['txId'] === 'undefined')\n      throw new Error(`Response is missing required field 'txId': ${data}`);\n    return new PostTransactionsResponse({\n      txid: data['txId'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Result of a transaction group simulation.\n */\nexport class SimulateResponse extends BaseModel {\n  /**\n   * The round immediately preceding this simulation. State changes through this\n   * round were used to run this simulation.\n   */\n  public lastRound: number | bigint;\n\n  /**\n   * A result object for each transaction group that was simulated.\n   */\n  public txnGroups: SimulateTransactionGroupResult[];\n\n  /**\n   * The version of this response object.\n   */\n  public version: number | bigint;\n\n  /**\n   * Indicates whether the simulated transactions would have succeeded during an\n   * actual submission. If any transaction fails or is missing a signature, this will\n   * be false.\n   */\n  public wouldSucceed: boolean;\n\n  /**\n   * Creates a new `SimulateResponse` object.\n   * @param lastRound - The round immediately preceding this simulation. State changes through this\n   * round were used to run this simulation.\n   * @param txnGroups - A result object for each transaction group that was simulated.\n   * @param version - The version of this response object.\n   * @param wouldSucceed - Indicates whether the simulated transactions would have succeeded during an\n   * actual submission. If any transaction fails or is missing a signature, this will\n   * be false.\n   */\n  constructor({\n    lastRound,\n    txnGroups,\n    version,\n    wouldSucceed,\n  }: {\n    lastRound: number | bigint;\n    txnGroups: SimulateTransactionGroupResult[];\n    version: number | bigint;\n    wouldSucceed: boolean;\n  }) {\n    super();\n    this.lastRound = lastRound;\n    this.txnGroups = txnGroups;\n    this.version = version;\n    this.wouldSucceed = wouldSucceed;\n\n    this.attribute_map = {\n      lastRound: 'last-round',\n      txnGroups: 'txn-groups',\n      version: 'version',\n      wouldSucceed: 'would-succeed',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): SimulateResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['last-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'last-round': ${data}`\n      );\n    if (!Array.isArray(data['txn-groups']))\n      throw new Error(\n        `Response is missing required array field 'txn-groups': ${data}`\n      );\n    if (typeof data['version'] === 'undefined')\n      throw new Error(`Response is missing required field 'version': ${data}`);\n    if (typeof data['would-succeed'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'would-succeed': ${data}`\n      );\n    return new SimulateResponse({\n      lastRound: data['last-round'],\n      txnGroups: data['txn-groups'].map(\n        SimulateTransactionGroupResult.from_obj_for_encoding\n      ),\n      version: data['version'],\n      wouldSucceed: data['would-succeed'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Simulation result for an atomic transaction group\n */\nexport class SimulateTransactionGroupResult extends BaseModel {\n  /**\n   * Simulation result for individual transactions\n   */\n  public txnResults: SimulateTransactionResult[];\n\n  /**\n   * If present, indicates which transaction in this group caused the failure. This\n   * array represents the path to the failing transaction. Indexes are zero based,\n   * the first element indicates the top-level transaction, and successive elements\n   * indicate deeper inner transactions.\n   */\n  public failedAt?: (number | bigint)[];\n\n  /**\n   * If present, indicates that the transaction group failed and specifies why that\n   * happened\n   */\n  public failureMessage?: string;\n\n  /**\n   * Creates a new `SimulateTransactionGroupResult` object.\n   * @param txnResults - Simulation result for individual transactions\n   * @param failedAt - If present, indicates which transaction in this group caused the failure. This\n   * array represents the path to the failing transaction. Indexes are zero based,\n   * the first element indicates the top-level transaction, and successive elements\n   * indicate deeper inner transactions.\n   * @param failureMessage - If present, indicates that the transaction group failed and specifies why that\n   * happened\n   */\n  constructor({\n    txnResults,\n    failedAt,\n    failureMessage,\n  }: {\n    txnResults: SimulateTransactionResult[];\n    failedAt?: (number | bigint)[];\n    failureMessage?: string;\n  }) {\n    super();\n    this.txnResults = txnResults;\n    this.failedAt = failedAt;\n    this.failureMessage = failureMessage;\n\n    this.attribute_map = {\n      txnResults: 'txn-results',\n      failedAt: 'failed-at',\n      failureMessage: 'failure-message',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): SimulateTransactionGroupResult {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['txn-results']))\n      throw new Error(\n        `Response is missing required array field 'txn-results': ${data}`\n      );\n    return new SimulateTransactionGroupResult({\n      txnResults: data['txn-results'].map(\n        SimulateTransactionResult.from_obj_for_encoding\n      ),\n      failedAt: data['failed-at'],\n      failureMessage: data['failure-message'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Simulation result for an individual transaction\n */\nexport class SimulateTransactionResult extends BaseModel {\n  /**\n   * Details about a pending transaction. If the transaction was recently confirmed,\n   * includes confirmation details like the round and reward details.\n   */\n  public txnResult: PendingTransactionResponse;\n\n  /**\n   * A boolean indicating whether this transaction is missing signatures\n   */\n  public missingSignature?: boolean;\n\n  /**\n   * Creates a new `SimulateTransactionResult` object.\n   * @param txnResult - Details about a pending transaction. If the transaction was recently confirmed,\n   * includes confirmation details like the round and reward details.\n   * @param missingSignature - A boolean indicating whether this transaction is missing signatures\n   */\n  constructor({\n    txnResult,\n    missingSignature,\n  }: {\n    txnResult: PendingTransactionResponse;\n    missingSignature?: boolean;\n  }) {\n    super();\n    this.txnResult = txnResult;\n    this.missingSignature = missingSignature;\n\n    this.attribute_map = {\n      txnResult: 'txn-result',\n      missingSignature: 'missing-signature',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): SimulateTransactionResult {\n    /* eslint-disable dot-notation */\n    if (typeof data['txn-result'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'txn-result': ${data}`\n      );\n    return new SimulateTransactionResult({\n      txnResult: PendingTransactionResponse.from_obj_for_encoding(\n        data['txn-result']\n      ),\n      missingSignature: data['missing-signature'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Represents a state proof and its corresponding message\n */\nexport class StateProof extends BaseModel {\n  /**\n   * Represents the message that the state proofs are attesting to.\n   */\n  public message: StateProofMessage;\n\n  /**\n   * The encoded StateProof for the message.\n   */\n  public stateproof: Uint8Array;\n\n  /**\n   * Creates a new `StateProof` object.\n   * @param message - Represents the message that the state proofs are attesting to.\n   * @param stateproof - The encoded StateProof for the message.\n   */\n  constructor({\n    message,\n    stateproof,\n  }: {\n    message: StateProofMessage;\n    stateproof: string | Uint8Array;\n  }) {\n    super();\n    this.message = message;\n    this.stateproof =\n      typeof stateproof === 'string'\n        ? new Uint8Array(Buffer.from(stateproof, 'base64'))\n        : stateproof;\n\n    this.attribute_map = {\n      message: 'Message',\n      stateproof: 'StateProof',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): StateProof {\n    /* eslint-disable dot-notation */\n    if (typeof data['Message'] === 'undefined')\n      throw new Error(`Response is missing required field 'Message': ${data}`);\n    if (typeof data['StateProof'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'StateProof': ${data}`\n      );\n    return new StateProof({\n      message: StateProofMessage.from_obj_for_encoding(data['Message']),\n      stateproof: data['StateProof'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Represents the message that the state proofs are attesting to.\n */\nexport class StateProofMessage extends BaseModel {\n  /**\n   * The vector commitment root on all light block headers within a state proof\n   * interval.\n   */\n  public blockheaderscommitment: Uint8Array;\n\n  /**\n   * The first round the message attests to.\n   */\n  public firstattestedround: number | bigint;\n\n  /**\n   * The last round the message attests to.\n   */\n  public lastattestedround: number | bigint;\n\n  /**\n   * An integer value representing the natural log of the proven weight with 16 bits\n   * of precision. This value would be used to verify the next state proof.\n   */\n  public lnprovenweight: number | bigint;\n\n  /**\n   * The vector commitment root of the top N accounts to sign the next StateProof.\n   */\n  public voterscommitment: Uint8Array;\n\n  /**\n   * Creates a new `StateProofMessage` object.\n   * @param blockheaderscommitment - The vector commitment root on all light block headers within a state proof\n   * interval.\n   * @param firstattestedround - The first round the message attests to.\n   * @param lastattestedround - The last round the message attests to.\n   * @param lnprovenweight - An integer value representing the natural log of the proven weight with 16 bits\n   * of precision. This value would be used to verify the next state proof.\n   * @param voterscommitment - The vector commitment root of the top N accounts to sign the next StateProof.\n   */\n  constructor({\n    blockheaderscommitment,\n    firstattestedround,\n    lastattestedround,\n    lnprovenweight,\n    voterscommitment,\n  }: {\n    blockheaderscommitment: string | Uint8Array;\n    firstattestedround: number | bigint;\n    lastattestedround: number | bigint;\n    lnprovenweight: number | bigint;\n    voterscommitment: string | Uint8Array;\n  }) {\n    super();\n    this.blockheaderscommitment =\n      typeof blockheaderscommitment === 'string'\n        ? new Uint8Array(Buffer.from(blockheaderscommitment, 'base64'))\n        : blockheaderscommitment;\n    this.firstattestedround = firstattestedround;\n    this.lastattestedround = lastattestedround;\n    this.lnprovenweight = lnprovenweight;\n    this.voterscommitment =\n      typeof voterscommitment === 'string'\n        ? new Uint8Array(Buffer.from(voterscommitment, 'base64'))\n        : voterscommitment;\n\n    this.attribute_map = {\n      blockheaderscommitment: 'BlockHeadersCommitment',\n      firstattestedround: 'FirstAttestedRound',\n      lastattestedround: 'LastAttestedRound',\n      lnprovenweight: 'LnProvenWeight',\n      voterscommitment: 'VotersCommitment',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): StateProofMessage {\n    /* eslint-disable dot-notation */\n    if (typeof data['BlockHeadersCommitment'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'BlockHeadersCommitment': ${data}`\n      );\n    if (typeof data['FirstAttestedRound'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'FirstAttestedRound': ${data}`\n      );\n    if (typeof data['LastAttestedRound'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'LastAttestedRound': ${data}`\n      );\n    if (typeof data['LnProvenWeight'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'LnProvenWeight': ${data}`\n      );\n    if (typeof data['VotersCommitment'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'VotersCommitment': ${data}`\n      );\n    return new StateProofMessage({\n      blockheaderscommitment: data['BlockHeadersCommitment'],\n      firstattestedround: data['FirstAttestedRound'],\n      lastattestedround: data['LastAttestedRound'],\n      lnprovenweight: data['LnProvenWeight'],\n      voterscommitment: data['VotersCommitment'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Supply represents the current supply of MicroAlgos in the system.\n */\nexport class SupplyResponse extends BaseModel {\n  /**\n   * Round\n   */\n  public currentRound: number | bigint;\n\n  /**\n   * OnlineMoney\n   */\n  public onlineMoney: number | bigint;\n\n  /**\n   * TotalMoney\n   */\n  public totalMoney: number | bigint;\n\n  /**\n   * Creates a new `SupplyResponse` object.\n   * @param currentRound - Round\n   * @param onlineMoney - OnlineMoney\n   * @param totalMoney - TotalMoney\n   */\n  constructor({\n    currentRound,\n    onlineMoney,\n    totalMoney,\n  }: {\n    currentRound: number | bigint;\n    onlineMoney: number | bigint;\n    totalMoney: number | bigint;\n  }) {\n    super();\n    this.currentRound = currentRound;\n    this.onlineMoney = onlineMoney;\n    this.totalMoney = totalMoney;\n\n    this.attribute_map = {\n      currentRound: 'current_round',\n      onlineMoney: 'online-money',\n      totalMoney: 'total-money',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): SupplyResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['current_round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'current_round': ${data}`\n      );\n    if (typeof data['online-money'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'online-money': ${data}`\n      );\n    if (typeof data['total-money'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'total-money': ${data}`\n      );\n    return new SupplyResponse({\n      currentRound: data['current_round'],\n      onlineMoney: data['online-money'],\n      totalMoney: data['total-money'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Represents a key-value pair in an application store.\n */\nexport class TealKeyValue extends BaseModel {\n  public key: string;\n\n  /**\n   * Represents a TEAL value.\n   */\n  public value: TealValue;\n\n  /**\n   * Creates a new `TealKeyValue` object.\n   * @param key -\n   * @param value - Represents a TEAL value.\n   */\n  constructor({ key, value }: { key: string; value: TealValue }) {\n    super();\n    this.key = key;\n    this.value = value;\n\n    this.attribute_map = {\n      key: 'key',\n      value: 'value',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): TealKeyValue {\n    /* eslint-disable dot-notation */\n    if (typeof data['key'] === 'undefined')\n      throw new Error(`Response is missing required field 'key': ${data}`);\n    if (typeof data['value'] === 'undefined')\n      throw new Error(`Response is missing required field 'value': ${data}`);\n    return new TealKeyValue({\n      key: data['key'],\n      value: TealValue.from_obj_for_encoding(data['value']),\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Represents a TEAL value.\n */\nexport class TealValue extends BaseModel {\n  /**\n   * (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\n   */\n  public type: number | bigint;\n\n  /**\n   * (tb) bytes value.\n   */\n  public bytes: string;\n\n  /**\n   * (ui) uint value.\n   */\n  public uint: number | bigint;\n\n  /**\n   * Creates a new `TealValue` object.\n   * @param type - (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\n   * @param bytes - (tb) bytes value.\n   * @param uint - (ui) uint value.\n   */\n  constructor({\n    type,\n    bytes,\n    uint,\n  }: {\n    type: number | bigint;\n    bytes: string;\n    uint: number | bigint;\n  }) {\n    super();\n    this.type = type;\n    this.bytes = bytes;\n    this.uint = uint;\n\n    this.attribute_map = {\n      type: 'type',\n      bytes: 'bytes',\n      uint: 'uint',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): TealValue {\n    /* eslint-disable dot-notation */\n    if (typeof data['type'] === 'undefined')\n      throw new Error(`Response is missing required field 'type': ${data}`);\n    if (typeof data['bytes'] === 'undefined')\n      throw new Error(`Response is missing required field 'bytes': ${data}`);\n    if (typeof data['uint'] === 'undefined')\n      throw new Error(`Response is missing required field 'uint': ${data}`);\n    return new TealValue({\n      type: data['type'],\n      bytes: data['bytes'],\n      uint: data['uint'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * TransactionParams contains the parameters that help a client construct a new\n * transaction.\n */\nexport class TransactionParametersResponse extends BaseModel {\n  /**\n   * ConsensusVersion indicates the consensus protocol version\n   * as of LastRound.\n   */\n  public consensusVersion: string;\n\n  /**\n   * Fee is the suggested transaction fee\n   * Fee is in units of micro-Algos per byte.\n   * Fee may fall to zero but transactions must still have a fee of\n   * at least MinTxnFee for the current network protocol.\n   */\n  public fee: number | bigint;\n\n  /**\n   * GenesisHash is the hash of the genesis block.\n   */\n  public genesisHash: Uint8Array;\n\n  /**\n   * GenesisID is an ID listed in the genesis block.\n   */\n  public genesisId: string;\n\n  /**\n   * LastRound indicates the last round seen\n   */\n  public lastRound: number | bigint;\n\n  /**\n   * The minimum transaction fee (not per byte) required for the\n   * txn to validate for the current network protocol.\n   */\n  public minFee: number | bigint;\n\n  /**\n   * Creates a new `TransactionParametersResponse` object.\n   * @param consensusVersion - ConsensusVersion indicates the consensus protocol version\n   * as of LastRound.\n   * @param fee - Fee is the suggested transaction fee\n   * Fee is in units of micro-Algos per byte.\n   * Fee may fall to zero but transactions must still have a fee of\n   * at least MinTxnFee for the current network protocol.\n   * @param genesisHash - GenesisHash is the hash of the genesis block.\n   * @param genesisId - GenesisID is an ID listed in the genesis block.\n   * @param lastRound - LastRound indicates the last round seen\n   * @param minFee - The minimum transaction fee (not per byte) required for the\n   * txn to validate for the current network protocol.\n   */\n  constructor({\n    consensusVersion,\n    fee,\n    genesisHash,\n    genesisId,\n    lastRound,\n    minFee,\n  }: {\n    consensusVersion: string;\n    fee: number | bigint;\n    genesisHash: string | Uint8Array;\n    genesisId: string;\n    lastRound: number | bigint;\n    minFee: number | bigint;\n  }) {\n    super();\n    this.consensusVersion = consensusVersion;\n    this.fee = fee;\n    this.genesisHash =\n      typeof genesisHash === 'string'\n        ? new Uint8Array(Buffer.from(genesisHash, 'base64'))\n        : genesisHash;\n    this.genesisId = genesisId;\n    this.lastRound = lastRound;\n    this.minFee = minFee;\n\n    this.attribute_map = {\n      consensusVersion: 'consensus-version',\n      fee: 'fee',\n      genesisHash: 'genesis-hash',\n      genesisId: 'genesis-id',\n      lastRound: 'last-round',\n      minFee: 'min-fee',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionParametersResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['consensus-version'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'consensus-version': ${data}`\n      );\n    if (typeof data['fee'] === 'undefined')\n      throw new Error(`Response is missing required field 'fee': ${data}`);\n    if (typeof data['genesis-hash'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'genesis-hash': ${data}`\n      );\n    if (typeof data['genesis-id'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'genesis-id': ${data}`\n      );\n    if (typeof data['last-round'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'last-round': ${data}`\n      );\n    if (typeof data['min-fee'] === 'undefined')\n      throw new Error(`Response is missing required field 'min-fee': ${data}`);\n    return new TransactionParametersResponse({\n      consensusVersion: data['consensus-version'],\n      fee: data['fee'],\n      genesisHash: data['genesis-hash'],\n      genesisId: data['genesis-id'],\n      lastRound: data['last-round'],\n      minFee: data['min-fee'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * Proof of transaction in a block.\n */\nexport class TransactionProofResponse extends BaseModel {\n  /**\n   * Index of the transaction in the block's payset.\n   */\n  public idx: number | bigint;\n\n  /**\n   * Proof of transaction membership.\n   */\n  public proof: Uint8Array;\n\n  /**\n   * Hash of SignedTxnInBlock for verifying proof.\n   */\n  public stibhash: Uint8Array;\n\n  /**\n   * Represents the depth of the tree that is being proven, i.e. the number of edges\n   * from a leaf to the root.\n   */\n  public treedepth: number | bigint;\n\n  /**\n   * The type of hash function used to create the proof, must be one of:\n   * * sha512_256\n   * * sha256\n   */\n  public hashtype?: string;\n\n  /**\n   * Creates a new `TransactionProofResponse` object.\n   * @param idx - Index of the transaction in the block's payset.\n   * @param proof - Proof of transaction membership.\n   * @param stibhash - Hash of SignedTxnInBlock for verifying proof.\n   * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\n   * from a leaf to the root.\n   * @param hashtype - The type of hash function used to create the proof, must be one of:\n   * * sha512_256\n   * * sha256\n   */\n  constructor({\n    idx,\n    proof,\n    stibhash,\n    treedepth,\n    hashtype,\n  }: {\n    idx: number | bigint;\n    proof: string | Uint8Array;\n    stibhash: string | Uint8Array;\n    treedepth: number | bigint;\n    hashtype?: string;\n  }) {\n    super();\n    this.idx = idx;\n    this.proof =\n      typeof proof === 'string'\n        ? new Uint8Array(Buffer.from(proof, 'base64'))\n        : proof;\n    this.stibhash =\n      typeof stibhash === 'string'\n        ? new Uint8Array(Buffer.from(stibhash, 'base64'))\n        : stibhash;\n    this.treedepth = treedepth;\n    this.hashtype = hashtype;\n\n    this.attribute_map = {\n      idx: 'idx',\n      proof: 'proof',\n      stibhash: 'stibhash',\n      treedepth: 'treedepth',\n      hashtype: 'hashtype',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(\n    data: Record<string, any>\n  ): TransactionProofResponse {\n    /* eslint-disable dot-notation */\n    if (typeof data['idx'] === 'undefined')\n      throw new Error(`Response is missing required field 'idx': ${data}`);\n    if (typeof data['proof'] === 'undefined')\n      throw new Error(`Response is missing required field 'proof': ${data}`);\n    if (typeof data['stibhash'] === 'undefined')\n      throw new Error(`Response is missing required field 'stibhash': ${data}`);\n    if (typeof data['treedepth'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'treedepth': ${data}`\n      );\n    return new TransactionProofResponse({\n      idx: data['idx'],\n      proof: data['proof'],\n      stibhash: data['stibhash'],\n      treedepth: data['treedepth'],\n      hashtype: data['hashtype'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n\n/**\n * algod version information.\n */\nexport class Version extends BaseModel {\n  public build: BuildVersion;\n\n  public genesisHashB64: Uint8Array;\n\n  public genesisId: string;\n\n  public versions: string[];\n\n  /**\n   * Creates a new `Version` object.\n   * @param build -\n   * @param genesisHashB64 -\n   * @param genesisId -\n   * @param versions -\n   */\n  constructor({\n    build,\n    genesisHashB64,\n    genesisId,\n    versions,\n  }: {\n    build: BuildVersion;\n    genesisHashB64: string | Uint8Array;\n    genesisId: string;\n    versions: string[];\n  }) {\n    super();\n    this.build = build;\n    this.genesisHashB64 =\n      typeof genesisHashB64 === 'string'\n        ? new Uint8Array(Buffer.from(genesisHashB64, 'base64'))\n        : genesisHashB64;\n    this.genesisId = genesisId;\n    this.versions = versions;\n\n    this.attribute_map = {\n      build: 'build',\n      genesisHashB64: 'genesis_hash_b64',\n      genesisId: 'genesis_id',\n      versions: 'versions',\n    };\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data: Record<string, any>): Version {\n    /* eslint-disable dot-notation */\n    if (typeof data['build'] === 'undefined')\n      throw new Error(`Response is missing required field 'build': ${data}`);\n    if (typeof data['genesis_hash_b64'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'genesis_hash_b64': ${data}`\n      );\n    if (typeof data['genesis_id'] === 'undefined')\n      throw new Error(\n        `Response is missing required field 'genesis_id': ${data}`\n      );\n    if (!Array.isArray(data['versions']))\n      throw new Error(\n        `Response is missing required array field 'versions': ${data}`\n      );\n    return new Version({\n      build: BuildVersion.from_obj_for_encoding(data['build']),\n      genesisHashB64: data['genesis_hash_b64'],\n      genesisId: data['genesis_id'],\n      versions: data['versions'],\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}