{"ast":null,"code":"import { Buffer } from 'buffer';\nimport * as encoding from '../../../encoding/encoding';\nimport { concatArrays } from '../../../utils/utils';\nimport JSONRequest from '../jsonrequest';\nimport { SimulateResponse } from './models/types';\n/**\n * Sets the default header (if not previously set) for simulating a raw\n * transaction.\n * @param headers - A headers object\n */\nexport function setSimulateTransactionsHeaders() {\n  let headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let hdrs = headers;\n  if (Object.keys(hdrs).every(key => key.toLowerCase() !== 'content-type')) {\n    hdrs = {\n      ...headers\n    };\n    hdrs['Content-Type'] = 'application/x-binary';\n  }\n  return hdrs;\n}\nfunction isByteArray(array) {\n  return array && array.byteLength !== undefined;\n}\n/**\n * Simulates signed txns.\n */\nexport default class SimulateRawTransactions extends JSONRequest {\n  constructor(c, stxOrStxs) {\n    super(c);\n    this.query.format = 'msgpack';\n    let forPosting = stxOrStxs;\n    if (Array.isArray(stxOrStxs)) {\n      if (!stxOrStxs.every(isByteArray)) {\n        throw new TypeError('Array elements must be byte arrays');\n      }\n      // Flatten into a single Uint8Array\n      forPosting = concatArrays(...stxOrStxs);\n    } else if (!isByteArray(forPosting)) {\n      throw new TypeError('Argument must be byte array');\n    }\n    this.txnBytesToPost = forPosting;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  path() {\n    return '/v2/transactions/simulate';\n  }\n  async do() {\n    let headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const txHeaders = setSimulateTransactionsHeaders(headers);\n    const res = await this.c.post(this.path(), Buffer.from(this.txnBytesToPost), txHeaders, this.query, false);\n    return this.prepare(res.body);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  prepare(body) {\n    const decoded = encoding.decode(body);\n    return SimulateResponse.from_obj_for_encoding(decoded);\n  }\n}","map":{"version":3,"names":["Buffer","encoding","concatArrays","JSONRequest","SimulateResponse","setSimulateTransactionsHeaders","headers","arguments","length","undefined","hdrs","Object","keys","every","key","toLowerCase","isByteArray","array","byteLength","SimulateRawTransactions","constructor","c","stxOrStxs","query","format","forPosting","Array","isArray","TypeError","txnBytesToPost","path","do","txHeaders","res","post","from","prepare","body","decoded","decode","from_obj_for_encoding"],"sources":["/home/danica/morra/frontend/node_modules/algosdk/src/client/v2/algod/simulateTransaction.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport * as encoding from '../../../encoding/encoding';\nimport { concatArrays } from '../../../utils/utils';\nimport HTTPClient from '../../client';\nimport JSONRequest from '../jsonrequest';\nimport { SimulateResponse } from './models/types';\n\n/**\n * Sets the default header (if not previously set) for simulating a raw\n * transaction.\n * @param headers - A headers object\n */\nexport function setSimulateTransactionsHeaders(headers = {}) {\n  let hdrs = headers;\n  if (Object.keys(hdrs).every((key) => key.toLowerCase() !== 'content-type')) {\n    hdrs = { ...headers };\n    hdrs['Content-Type'] = 'application/x-binary';\n  }\n  return hdrs;\n}\n\nfunction isByteArray(array: any): array is Uint8Array {\n  return array && array.byteLength !== undefined;\n}\n\n/**\n * Simulates signed txns.\n */\nexport default class SimulateRawTransactions extends JSONRequest<\n  SimulateResponse,\n  Uint8Array\n> {\n  private txnBytesToPost: Uint8Array;\n\n  constructor(c: HTTPClient, stxOrStxs: Uint8Array | Uint8Array[]) {\n    super(c);\n    this.query.format = 'msgpack';\n\n    let forPosting = stxOrStxs;\n    if (Array.isArray(stxOrStxs)) {\n      if (!stxOrStxs.every(isByteArray)) {\n        throw new TypeError('Array elements must be byte arrays');\n      }\n      // Flatten into a single Uint8Array\n      forPosting = concatArrays(...stxOrStxs);\n    } else if (!isByteArray(forPosting)) {\n      throw new TypeError('Argument must be byte array');\n    }\n    this.txnBytesToPost = forPosting;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  path() {\n    return '/v2/transactions/simulate';\n  }\n\n  async do(headers = {}) {\n    const txHeaders = setSimulateTransactionsHeaders(headers);\n    const res = await this.c.post(\n      this.path(),\n      Buffer.from(this.txnBytesToPost),\n      txHeaders,\n      this.query,\n      false\n    );\n    return this.prepare(res.body);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  prepare(body: Uint8Array): SimulateResponse {\n    const decoded = encoding.decode(body);\n    return SimulateResponse.from_obj_for_encoding(decoded);\n  }\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAO,KAAKC,QAAQ,MAAM,4BAA4B;AACtD,SAASC,YAAY,QAAQ,sBAAsB;AAEnD,OAAOC,WAAW,MAAM,gBAAgB;AACxC,SAASC,gBAAgB,QAAQ,gBAAgB;AAEjD;;;;;AAKA,OAAM,SAAUC,8BAA8BA,CAAA,EAAa;EAAA,IAAZC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EACzD,IAAIG,IAAI,GAAGJ,OAAO;EAClB,IAAIK,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,CAACG,KAAK,CAAEC,GAAG,IAAKA,GAAG,CAACC,WAAW,EAAE,KAAK,cAAc,CAAC,EAAE;IAC1EL,IAAI,GAAG;MAAE,GAAGJ;IAAO,CAAE;IACrBI,IAAI,CAAC,cAAc,CAAC,GAAG,sBAAsB;;EAE/C,OAAOA,IAAI;AACb;AAEA,SAASM,WAAWA,CAACC,KAAU;EAC7B,OAAOA,KAAK,IAAIA,KAAK,CAACC,UAAU,KAAKT,SAAS;AAChD;AAEA;;;AAGA,eAAc,MAAOU,uBAAwB,SAAQhB,WAGpD;EAGCiB,YAAYC,CAAa,EAAEC,SAAoC;IAC7D,KAAK,CAACD,CAAC,CAAC;IACR,IAAI,CAACE,KAAK,CAACC,MAAM,GAAG,SAAS;IAE7B,IAAIC,UAAU,GAAGH,SAAS;IAC1B,IAAII,KAAK,CAACC,OAAO,CAACL,SAAS,CAAC,EAAE;MAC5B,IAAI,CAACA,SAAS,CAACT,KAAK,CAACG,WAAW,CAAC,EAAE;QACjC,MAAM,IAAIY,SAAS,CAAC,oCAAoC,CAAC;;MAE3D;MACAH,UAAU,GAAGvB,YAAY,CAAC,GAAGoB,SAAS,CAAC;KACxC,MAAM,IAAI,CAACN,WAAW,CAACS,UAAU,CAAC,EAAE;MACnC,MAAM,IAAIG,SAAS,CAAC,6BAA6B,CAAC;;IAEpD,IAAI,CAACC,cAAc,GAAGJ,UAAU;EAClC;EAEA;EACAK,IAAIA,CAAA;IACF,OAAO,2BAA2B;EACpC;EAEA,MAAMC,EAAEA,CAAA,EAAa;IAAA,IAAZzB,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IACnB,MAAMyB,SAAS,GAAG3B,8BAA8B,CAACC,OAAO,CAAC;IACzD,MAAM2B,GAAG,GAAG,MAAM,IAAI,CAACZ,CAAC,CAACa,IAAI,CAC3B,IAAI,CAACJ,IAAI,EAAE,EACX9B,MAAM,CAACmC,IAAI,CAAC,IAAI,CAACN,cAAc,CAAC,EAChCG,SAAS,EACT,IAAI,CAACT,KAAK,EACV,KAAK,CACN;IACD,OAAO,IAAI,CAACa,OAAO,CAACH,GAAG,CAACI,IAAI,CAAC;EAC/B;EAEA;EACAD,OAAOA,CAACC,IAAgB;IACtB,MAAMC,OAAO,GAAGrC,QAAQ,CAACsC,MAAM,CAACF,IAAI,CAAC;IACrC,OAAOjC,gBAAgB,CAACoC,qBAAqB,CAACF,OAAO,CAAC;EACxD"},"metadata":{},"sourceType":"module","externalDependencies":[]}